<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络</title>
      <link href="2021/07/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>2021/07/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="OSI与TCP-IP各层的结构与功能，都有哪些协议？"><a href="#OSI与TCP-IP各层的结构与功能，都有哪些协议？" class="headerlink" title="OSI与TCP/IP各层的结构与功能，都有哪些协议？"></a>OSI与TCP/IP各层的结构与功能，都有哪些协议？</h2><span id="more"></span> <p>其中表示层和会话层都会归结到应用层，从下到下的层级解释：</p><p><strong>应用层</strong></p><p>应用层的任务是通过<strong>应用进程</strong>间的交互来完成特定网络应用。应用层协议定义的应用进程间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，比如<strong>域名系统DNS</strong>，万维网的<strong>HTTP协议</strong>，邮件系统的<strong>SMTP</strong>。我们把应用层交互的数据称为<strong>报文</strong></p><p><strong>表示层</strong></p><p>表示层的主要作用是数据的表示、安全、压缩。可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取</p><p><strong>会话层</strong></p><p>会话层的主要作用是建立通信链接，保持会话过程通信链接的畅通，同步两个节点之间的对话，决定通信是否被中断以及通信中断时决定从何处重新发送。</p><p><strong>传输层</strong></p><p>传输层的主要作用是负责向两台主机进程之间的通信提供数据传输服务。传输层的协议主要有传输控制协议TCP和用户数据协议UDP</p><p><strong>网络层</strong></p><p>网络层的主要作用是选择合适的网间路由和交换结点，确保数据及时送达。常见的协议有IP协议。</p><p><strong>数据链路层</strong></p><p>数据链路层的作用是在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路，通过差错控制提供数据帧（Frame）在信道上无差错的传输，并进行各电路上的动作系列。 常见的协议有SDLC、HDLC、PPP等。</p><p><strong>物理层</strong></p><p>物理层的主要作用是实现相邻计算机结点之间比特流的透明传输，并尽量屏蔽掉具体传输介质和物理设备的差异</p><h3 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h3><ul><li>URI(Uniform Resource Identifier)：中文全称为统一资源标志符，主要作用是唯一标识一个资源。</li><li>URL(Uniform Resource Location)：中文全称为统一资源定位符，主要作用是提供资源的路径。</li></ul><p>有个经典的比喻是URI像是身份证，可以唯一标识一个人，而URL更像一个住址，可以通过URL找到这个人。</p><h2 id="DNS的工作流程"><a href="#DNS的工作流程" class="headerlink" title="DNS的工作流程"></a>DNS的工作流程</h2><blockquote><p>主机向本地域名服务器的查询一般是采用递归查询，而本地域名服务器向根域名的查询一般是采用迭代查询。</p><p>递归查询主机向本地域名发送查询请求报文，而本地域名服务器不知道该域名对应的IP地址时，本地域名会继续向根域名发送查询请求报文，不是通知主机自己向根域名发送查询请求报文。迭代查询是，本地域名服务器向根域名发出查询请求报文后，根域名不会继续向顶级域名服务器发送查询请求报文，而是通知本地域名服务器向顶级域名发送查询请求报文。</p><p>简单来说，递归查询就是，小明问了小红一个问题，小红不知道，但小红是个热心肠，小红就去问小王了，小王把答案告诉小红后，小红又去把答案告诉了小明。迭代查询就是，小明问了小红一个问题，小红也不知道，然后小红让小明去问小王，小明又去问小王了，小王把答案告诉了小明。</p></blockquote><ol><li>在浏览器中输入<a href="http://www.baidu.com域名,操作系统会先检查自己本地的hosts文件是否有这个域名的映射关系,如果有,就先调用这个ip地址映射,完成域名解析./">www.baidu.com域名，操作系统会先检查自己本地的hosts文件是否有这个域名的映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</a></li><li>如果hosts文件中没有，则查询本地DNS解析器缓存，如果有，则完成地址解析。</li><li>如果本地DNS解析器缓存中没有，则去查找本地DNS服务器，如果查到，完成解析。</li><li>如果没有，则本地服务器会向根域名服务器发起查询请求。根域名服务器会告诉本地域名服务器去查询哪个顶级域名服务器。</li><li>本地域名服务器向顶级域名服务器发起查询请求，顶级域名服务器会告诉本地域名服务器去查找哪个权限域名服务器。</li><li>本地域名服务器向权限域名服务器发起查询请求，权限域名服务器告诉本地域名服务器<a href="http://www.baidu.com所对应的ip地址./">www.baidu.com所对应的IP地址。</a></li><li>本地域名服务器告诉主机<a href="http://www.baidu.com所对应的ip地址./">www.baidu.com所对应的IP地址。</a></li></ol><h3 id="了解ARP协议吗"><a href="#了解ARP协议吗" class="headerlink" title="了解ARP协议吗?"></a>了解ARP协议吗?</h3><p>ARP协议属于网络层的协议，主要作用是实现从IP地址转换为MAC地址。在每个主机或者路由器中都建有一个ARP缓存表，表中有IP地址及IP地址对应的MAC地址。先来看一下什么时IP地址和MAC地址。</p><ul><li>IP地址：IP地址是指互联网协议地址，IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</li><li>MAC地址：MAC地址又称物理地址，由网络设备制造商生产时写在硬件内部，不可更改，并且每个以太网设备的MAC地址都是唯一的。</li></ul><p>数据在传输过程中，会先从高层传到底层，然后在通信链路上传输。从下图可以看到TCP报文在网络层会被封装成IP数据报，在数据链路层被封装成MAC帧，然后在通信链路中传输。在网络层使用的是IP地址，在数据据链路层使用的是MAC地址。MAC帧在传送时的源地址和目的地址使用的都是MAC地址，在通信链路上的主机或路由器也都是根据MAC帧首部的MAC地址接收MAC帧。并且在数据链路层是看不到IP地址的，只有当数据传到网络层时去掉MAC帧的首部和尾部时才能在IP数据报的首部中找到源IP地址和目的地址。</p><p><img src="https://segmentfault.com/img/remote/1460000038526732" alt="在这里插入图片描述"></p><p>网络层实现的是主机之间的通信，而链路层实现的是链路之间的通信，所以从下图可以看出，在数据传输过程中，IP数据报的源地址(IP1)和目的地址(IP2)是一直不变的，而MAC地址(硬件地址)却一直随着链路的改变而改变。</p><p><img src="https://segmentfault.com/img/remote/1460000038526738" alt="在这里插入图片描述"></p><p>ARP的工作流程(面试时问ARP协议主要说这个就可以了)：</p><ol><li>在局域网内，主机A要向主机B发送IP数据报时，首先会在主机A的ARP缓存表中查找是否有IP地址及其对应的MAC地址，如果有，则将MAC地址写入到MAC帧的首部，并通过局域网将该MAC帧发送到MAC地址所在的主机B。</li><li>如果主机A的ARP缓存表中没有主机B的IP地址及所对应的MAC地址，主机A会在局域网内广播发送一个ARP请求分组。局域网内的所有主机都会收到这个ARP请求分组。</li><li>主机B在看到主机A发送的ARP请求分组中有自己的IP地址，会像主机A以单播的方式发送一个带有自己MAC地址的响应分组。</li><li>主机A收到主机B的ARP响应分组后，会在ARP缓存表中写入主机B的IP地址及其IP地址对应的MAC地址。</li><li>如果主机A和主机B不在同一个局域网内，即使知道主机B的MAC地址也是不能直接通信的，必须通过路由器转发到主机B的局域网才可以通过主机B的MAC地址找到主机B。并且主机A和主机B已经可以通信的情况下，主机A的ARP缓存表中寸的并不是主机B的IP地址及主机B的MAC地址，而是主机B的IP地址及该通信链路上的下一跳路由器的MAC地址。这就是上图中的源IP地址和目的IP地址一直不变，而MAC地址却随着链路的不同而改变。</li><li>如果主机A和主机B不在同一个局域网，参考上图中的主机H1和主机H2，这时主机H1需要先广播找到路由器R1的MAC地址，再由R1广播找到路由器R2的MAC地址，最后R2广播找到主机H2的MAC地址，建立起通信链路。</li></ol><h3 id="有了IP地址，为什么还要用MAC地址？"><a href="#有了IP地址，为什么还要用MAC地址？" class="headerlink" title="有了IP地址，为什么还要用MAC地址？"></a>有了IP地址，为什么还要用MAC地址？</h3><blockquote><p>简单来说，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。具体是如何组合使用的在上面的ARP协议中已经讲的很清楚了。</p><p>那只用MAC地址不用IP地址可不可以呢？其实也是不行的，因为在最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可，这个过程就是上面说的ARP协议。</p><p>那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。</p><p>IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的</p></blockquote><h3 id="说一下ping的过程"><a href="#说一下ping的过程" class="headerlink" title="说一下ping的过程"></a>说一下ping的过程</h3><p>ping是ICMP(网际控制报文协议)中的一个重要应用，ICMP是网络层的协议。ping的作用是测试两个主机的连通性。</p><p>ping的工作过程：</p><ol><li>向目的主机发送多个ICMP回送请求报文</li><li>根据目的主机返回的回送报文的时间和成功响应的次数估算出数据包往返时间及丢包率。</li></ol><h3 id="路由器和交换机的区别？"><a href="#路由器和交换机的区别？" class="headerlink" title="路由器和交换机的区别？"></a>路由器和交换机的区别？</h3><table><thead><tr><th align="center"></th><th align="center">所属网络模型的层级</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">路由器</td><td align="center">网络层</td><td align="center">识别IP地址并根据IP地址转发数据包，维护数据表并基于数据表进行最佳路径选择</td></tr><tr><td align="center">交换机</td><td align="center">数据链库层</td><td align="center">识别MAC地址并根据MAC地址转发数据帧</td></tr></tbody></table><h3 id="TCP与UDP有什么区别-＊＊＊"><a href="#TCP与UDP有什么区别-＊＊＊" class="headerlink" title="TCP与UDP有什么区别　＊＊＊"></a>TCP与UDP有什么区别　＊＊＊</h3><table><thead><tr><th align="center"></th><th align="center">是否面向连接</th><th align="center">可靠性</th><th align="center">传输形式</th><th align="center">传输效率</th><th align="center">消耗资源</th><th align="center">应用场景</th><th align="center">首部字节</th></tr></thead><tbody><tr><td align="center">TCP</td><td align="center">面向连接</td><td align="center">可靠</td><td align="center">字节流</td><td align="center">慢</td><td align="center">多</td><td align="center">文件/邮件传输</td><td align="center">20~60</td></tr><tr><td align="center">UDP</td><td align="center">无连接</td><td align="center">不可靠</td><td align="center">数据报文段</td><td align="center">快</td><td align="center">少</td><td align="center">视频/语音传输</td><td align="center">8</td></tr></tbody></table><ul><li><p>TCP首部(图片来源于网络)：</p><p>前20个字节是固定的，后面有4n个字节是根据需而增加的选项，所以TCP首部最小长度为20字节。</p></li></ul><p><img src="https://segmentfault.com/img/remote/1460000038526734" alt="在这里插入图片描述"></p><ul><li><p>UDP首部(图片来源于网络)：</p><p>UDP的首部只有8个字节，源端口号、目的端口号、长度和校验和各两个字节。<img src="https://segmentfault.com/img/remote/1460000038526736" alt="在这里插入图片描述"></p></li></ul><h3 id="TCP协议如何保证可靠传输-＊＊＊"><a href="#TCP协议如何保证可靠传输-＊＊＊" class="headerlink" title="TCP协议如何保证可靠传输　＊＊＊"></a>TCP协议如何保证可靠传输　＊＊＊</h3><blockquote><p>主要有校验和、序列号、超时重传、流量控制及拥塞避免等几种方法。</p></blockquote><ul><li>校验和：在发送算和接收端分别计算数据的校验和，如果两者不一致，则说明数据在传输过程中出现了差错，TCP将丢弃和不确认此报文段。</li><li>序列号：TCP会对每一个发送的字节进行编号，接收方接到数据后，会对发送方发送确认应答(ACK报文)，并且这个ACK报文中带有相应的确认编号，告诉发送方，下一次发送的数据从编号多少开始发。如果发送方发送相同的数据，接收端也可以通过序列号判断出，直接将数据丢弃。如果</li></ul><p><img src="https://segmentfault.com/img/remote/1460000038526737" alt="在这里插入图片描述"></p><ul><li><p>超时重传：在上面说了序列号的作用，但如果发送方在发送数据后一段时间内（可以设置重传计时器规定这段时间）没有收到确认序号ACK，那么发送方就会重新发送数据。</p><p>这里发送方没有收到ACK可以分两种情况，如果是发送方发送的数据包丢失了，接收方收到发送方重新发送的数据包后会马上给发送方发送ACK；如果是接收方之前接收到了发送方发送的数据包，而返回给发送方的ACK丢失了，这种情况，发送方重传后，接收方会直接丢弃发送方冲重传的数据包，然后再次发送ACK响应报文。</p><p>如果数据被重发之后还是没有收到接收方的确认应答，则进行再次发送。此时，等待确认应答的时间将会以2倍、4倍的指数函数延长，直到最后关闭连接。</p></li><li><p>流量控制：如果发送端发送的数据太快，接收端来不及接收就会出现丢包问题。为了解决这个问题，TCP协议利用了滑动窗口进行了流量控制。在TCP首部有一个16位字段大小的窗口，窗口的大小就是接收端接收数据缓冲区的剩余大小。接收端会在收到数据包后发送ACK报文时，将自己的窗口大小填入ACK中，发送方会根据ACK报文中的窗口大小进而控制发送速度。如果窗口大小为零，发送方会停止发送数据。</p></li><li><p>拥塞控制：如果网络出现拥塞，则会产生丢包等问题，这时发送方会将丢失的数据包继续重传，网络拥塞会更加严重，所以在网络出现拥塞时应注意控制发送方的发送数据，降低整个网络的拥塞程度。拥塞控制主要有四部分组成：慢开始、拥塞避免、快重传、快恢复，如下图(图片来源于网络)。</p><p><img src="https://segmentfault.com/img/remote/1460000038526742" alt="在这里插入图片描述"></p></li></ul><p>这里的发送方会维护一个拥塞窗口的状态变量，它和流量控制的滑动窗口是不一样的，滑动窗口是根据接收方数据缓冲区大小确定的，而拥塞窗口是根据网络的拥塞情况动态确定的，一般来说发送方真实的发送窗口为滑动窗口和拥塞窗口中的最小值。</p><ol><li><p>慢开始：为了避免一开始发送大量的数据而产生网络阻塞，会先初始化cwnd为1，当收到ACK后到下一个传输轮次，cwnd为2，以此类推成指数形式增长。</p></li><li><p>拥塞避免：因为cwnd的数量在慢开始是指数增长的，为了防止cwnd数量过大而导致网络阻塞，会设置一个慢开始的门限值ssthresh，当cwnd&gt;=ssthresh时，进入到拥塞避免阶段，cwnd每个传输轮次加1。但网络出现超时，会将门限值ssthresh变为出现超时cwnd数值的一半，cwnd重新设置为1，如上图，在第12轮出现超时后，cwnd变为1，ssthresh变为12。</p></li><li><p>快重传：在网络中如果出现超时或者阻塞，则按慢开始和拥塞避免算法进行调整。但如果只是丢失某一个报文段，如下图(图片来源于网络)，则使用快重传算法。</p><p><img src="https://segmentfault.com/img/remote/1460000038526741" alt="在这里插入图片描述"></p></li></ol><p>从上图可知，接收方正确地接收到M1和M2，而M3丢失，由于没有接收到M3，在接收方收到M5、M6和M7时，并不会进行确认，也就是不会发送ACK。这时根据前面说的保证TCP可靠性传输中的序列号的作用，接收方这时不会接收M5，M6，M7，接收方可以什么都不会，因为发送方长时间未收到M3的确认报文，会对M3进行重传。除了这样，接收方也可以重复发送M2的确认报文，这样发送端长时间未收到M3的确认报文也会继续发送M3报文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**但是根据快重传算法，要求在这种情况下，需要快速向发送端发送M2的确认报文，在发送方收到三个M2的确认报文后，无需等待重传计时器所设置的时间，可直接进行M3的重传，这就是快重传。**(面试时说这一句就够了，前面是帮助理解)</span><br></pre></td></tr></table></figure><ol><li>快恢复：从上上图圈4可以看到，当发送收到三个重复的ACK，会进行快重传和快恢复。快恢复是指将ssthresh设置为发生快重传时的cwnd数量的一半，而cwnd不是设置为1而是设置为为门限值ssthresh，并开始拥塞避免阶段。</li></ol><h3 id="TCP的三次握手及四次挥手-＊＊＊"><a href="#TCP的三次握手及四次挥手-＊＊＊" class="headerlink" title="TCP的三次握手及四次挥手　＊＊＊"></a>TCP的三次握手及四次挥手　＊＊＊</h3><blockquote><p>必考题</p></blockquote><p>在介绍三次握手和四次挥手之前，先介绍一下TCP头部的一些常用字段。</p><ul><li>序号：seq，占32位，用来标识从发送端到接收端发送的字节流。</li><li>确认号：ack，占32位，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1。</li><li>标志位：<ul><li>SYN：发起一个新连接。</li><li>FIN：释放一个连接。</li><li>ACK：确认序号有效。</li></ul></li></ul><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><blockquote><p>三次握手的本质就是确定发送端和接收端具备收发信息的能力，在能流畅描述三次握手的流程及其中的字段含义作用的同时还需要记住每次握手时<strong>接收端和发送端的状态</strong>。这个比较容易忽略。</p></blockquote><p>先看一张很经典的图（图片来源于网络），发送端有CLOSED、SYN-SENT、ESTABLISHED三种状态，接收端有CLOSED、LISTEN、SYN-RCVD、ESTABLISHED四种状态。<img src="https://segmentfault.com/img/remote/1460000038526739" alt="在这里插入图片描述"></p><p>假设发送端为客户端，接收端为服务端。开始时客户端和服务端的状态都是CLOSE。</p><ul><li>第一次握手：客户端向服务端发起建立连接请求，客户端会随机生成一个起始序列号x，客户端向服务端发送的字段中包含标志位SYN=1，序列号seq=100。第一次握手前客户端的状态为CLOSE，第一次握手后客户端的状态为SYN-SENT。此时服务端的状态为LISTEN</li><li>第二次握手：服务端在收到客户端发来的报文后，会随机生成一个服务端的起始序列号y，然后给客户端回复一段报文，其中包括标志位SYN=1，ACK=1，序列号seq=y，确认号ack=x+1。第二次握手前服务端的状态为LISTEN，第二次握手后服务端的状态为SYN-RCVD，此时客户端的状态为SYN-SENT。（其中SYN=1表示要和客户端建立一个连接，ACK=1表示确认序号有效）</li><li>第三次握手：客户端收到服务端发来的报文后，会再向服务端发送报文，其中包含标志位ACK=1，序列号seq=x+1，确认号ack=y+1。第三次握手前客户端的状态为SYN-SENT，第三次握手后客户端和服务端的状态都为ESTABLISHED。</li></ul><blockquote><p>需要注意的一点是，第一次握手，客户端向服务端发起建立连接报文，会占一个序列号。但是第三次握手，同样是客户端向服务端发送报文，这次却不占序列号，所以建立连接后，客户端向服务端发送的第一个数据的序列号为x+1。</p></blockquote><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>和三次握手一样，先看一张非常经典的图（图片来源于网络），客户端在四次挥手过程中有ESTABLISHED、FIN-WAIT-1、FIN-WAIT-2、TIME-WAIT、CLOSED等五个状态，服务端有ESTABLISHED、CLOSE-WAIT、LAST-ACK、CLOSED等四种状态。最好记住每次挥手时服务端和客户端的状态。<br>假设客户端首先发起的断开连接请求<br><img src="https://segmentfault.com/img/remote/1460000038526740" alt="在这里插入图片描述"></p><ul><li>第一次挥手：客户端向服务端发送的数据完成后，向服务端发起释放连接报文，报文包含标志位FIN=1，序列号seq=u。此时客户端只能接收数据，不能向服务端发送数据。</li><li>第二次挥手：服务端收到客户端的释放连接报文后，向客户端发送确认报文，包含标志位ACK=1，序列号seq=v，确认号ack=u+1。此时客户端到服务端的连接已经释放掉，客户端不能像服务端发送数据，服务端也不能向客户端发送数据。但服务端到客户端的单向连接还能正常传输数据。</li><li>第三次挥手：服务端发送完数据后向客户端发出连接释放报文，报文包含标志位FIN=1，标志位ACK=1，序列号seq=w，确认号ack=u+1。</li><li>第四次挥手：客户端收到服务端发送的释放连接请求，向服务端发送确认报文，包含标志位ACK=1，序列号seq=u+1，确认号ack=w+1。</li></ul><h4 id="为什么TCP连接的时候是3次？两次是否可以？"><a href="#为什么TCP连接的时候是3次？两次是否可以？" class="headerlink" title="为什么TCP连接的时候是3次？两次是否可以？"></a>为什么TCP连接的时候是3次？两次是否可以？</h4><p>不可以，主要从以下两方面考虑（假设客户端是首先发起连接请求）：</p><ol><li>假设建立TCP连接仅需要两次握手，那么如果第二次握手时，服务端返回给客户端的确认报文丢失了，客户端这边认为服务端没有和他建立连接，而服务端却以为已经和客户端建立了连接，并且可能向服务端已经开始向客户端发送数据，但客户端并不会接收这些数据，浪费了资源。如果是三次握手，不会出现双方连接还未完全建立成功就开始发送数据的情况。</li><li>如果服务端接收到了一个早已失效的来自客户端的连接请求报文，会向客户端发送确认报文同意建立TCP连接。但因为客户端并不需要向服务端发送数据，所以此次TCP连接没有意义并且浪费了资源。</li></ol><h4 id="为什么TCP连接的时候是3次，关闭的时候却是4次？"><a href="#为什么TCP连接的时候是3次，关闭的时候却是4次？" class="headerlink" title="为什么TCP连接的时候是3次，关闭的时候却是4次？"></a>为什么TCP连接的时候是3次，关闭的时候却是4次？</h4><p>因为需要确保通信双方都能通知对方释放连接，假设客服端发送完数据向服务端发送释放连接请求，当客服端并不知道，服务端是否已经发送完数据，所以此次断开的是客服端到服务端的单向连接，服务端返回给客户端确认报文后，服务端还能继续单向给客户端发送数据。当服务端发送完数据后还需要向客户端发送释放连接请求，客户端返回确认报文，TCP连接彻底关闭。所以断开TCP连接需要客户端和服务端分别通知对方并分别收到确认报文，一共需要四次。</p><h4 id="TIME-WAIT和CLOSE-WAIT的区别在哪"><a href="#TIME-WAIT和CLOSE-WAIT的区别在哪" class="headerlink" title="TIME_WAIT和CLOSE_WAIT的区别在哪?"></a>TIME_WAIT和CLOSE_WAIT的区别在哪?</h4><p>默认客户端首先发起断开连接请求</p><ul><li>从上图可以看出，CLOSE_WAIT是被动关闭形成的，当客户端发送FIN报文，服务端返回ACK报文后进入CLOSE_WAIT。</li><li>TIME_WAIT是主动关闭形成的，当第四次挥手完成后，客户端进入TIME_WAIT状态。</li></ul><h4 id="为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？"><a href="#为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？" class="headerlink" title="为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？"></a>为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？</h4><p>MSL的意思是报文的最长寿命，可以从两方面考虑：</p><ol><li>客户端发送第四次挥手中的报文后，再经过2MSL，可使本次TCP连接中的所有报文全部消失，不会出现在下一个TCP连接中。</li><li>考虑丢包问题，如果第四挥手发送的报文在传输过程中丢失了，那么服务端没收到确认ack报文就会重发第三次挥手的报文。如果客户端发送完第四次挥手的确认报文后直接关闭，而这次报文又恰好丢失，则会造成服务端无法正常关闭。</li></ol><h4 id="如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h4><p>如果TCP连接已经建立，在通信过程中，客户端突然故障，那么服务端不会一直等下去，过一段时间就关闭连接了。具体原理是TCP有一个保活机制，主要用在服务器端，用于检测已建立TCP链接的客户端的状态，防止因客户端崩溃或者客户端网络不可达，而服务器端一直保持该TCP链接，占用服务器端的大量资源(因为Linux系统中可以创建的总TCP链接数是有限制的)。</p><p>保活机制原理：设置TCP保活机制的保活时间keepIdle，即在TCP链接超过该时间没有任何数据交互时，发送保活探测报文；设置保活探测报文的发送时间间隔keepInterval；设置保活探测报文的总发送次数keepCount。如果在keepCount次的保活探测报文均没有收到客户端的回应，则服务器端即关闭与客户端的TCP链接。</p><h3 id="HTTP-与-HTTPS-的区别-＊＊＊"><a href="#HTTP-与-HTTPS-的区别-＊＊＊" class="headerlink" title="HTTP 与 HTTPS 的区别　＊＊＊"></a>HTTP 与 HTTPS 的区别　＊＊＊</h3><table><thead><tr><th align="center"></th><th align="center">HTTP</th><th align="center">HTTPS</th></tr></thead><tbody><tr><td align="center">端口</td><td align="center">80</td><td align="center">443</td></tr><tr><td align="center">安全性</td><td align="center">无加密，安全性较差</td><td align="center">有加密机制，安全性较高</td></tr><tr><td align="center">资源消耗</td><td align="center">较少</td><td align="center">由于加密处理，资源消耗更多</td></tr><tr><td align="center">是否需要证书</td><td align="center">不需要</td><td align="center">需要</td></tr><tr><td align="center">协议</td><td align="center">运行在TCP协议之上</td><td align="center">运行在SSL协议之上，SSL运行在TCP协议之上</td></tr></tbody></table><h3 id="什么是对称加密与非对称加密-＊＊"><a href="#什么是对称加密与非对称加密-＊＊" class="headerlink" title="什么是对称加密与非对称加密　＊＊"></a>什么是对称加密与非对称加密　＊＊</h3><ul><li><p>对称加密</p><p>对称加密指加密和解密使用同一密钥，优点是运算速度快，缺点是如何安全将密钥传输给另一方。常见的对称加密算法有DES、AES等等。</p></li><li><p>非对称加密</p><p>非对称加密指的是加密和解密使用不同的密钥，一把公开的公钥，一把私有的私钥。公钥加密的信息只有私钥才能解密，私钥加密的信息只有公钥才能解密。优点解决了对称加密中存在的问题。缺点是运算速度较慢。常见的非对称加密算法有RSA、DSA、ECC等等。</p><p>非对称加密的工作流程：A生成一对非堆成密钥，将公钥向所有人公开，B拿到A的公钥后使用A的公钥对信息加密后发送给A，经过加密的信息只有A手中的私钥能解密。这样B可以通过这种方式将自己的公钥加密后发送给A，两方建立起通信，可以通过对方的公钥加密要发送的信息，接收方用自己的私钥解密信息</p></li></ul><h3 id="HTTP-1-0、HTTP-1-1及HTTP-2-0的主要区别是什么-＊＊"><a href="#HTTP-1-0、HTTP-1-1及HTTP-2-0的主要区别是什么-＊＊" class="headerlink" title="HTTP 1.0、HTTP 1.1及HTTP 2.0的主要区别是什么　＊＊"></a>HTTP 1.0、HTTP 1.1及HTTP 2.0的主要区别是什么　＊＊</h3><p>HTTP 1.0和HTTP 1.1的区别</p><ul><li><p>长连接</p><p>HTTP 1.1支持长连接和请求的流水线操作。长连接是指不在需要每次请求都重新建立一次连接，HTTP 1.0默认使用短连接，每次请求都要重新建立一次TCP连接，资源消耗较大。请求的流水线操作是指客户端在收到HTTP的响应报文之前可以先发送新的请求报文，不支持请求的流水线操作需要等到收到HTTP的响应报文后才能继续发送新的请求报文。</p></li><li><p>缓存处理</p><p>在HTTP 1.0中主要使用header中的If-Modified-Since,Expires作为缓存判断的标准，HTTP 1.1引入了Entity tag，If-Unmodified-Since, If-Match等更多可供选择的缓存头来控制缓存策略。</p></li><li><p>错误状态码</p><p>在HTTP 1.1新增了24个错误状态响应码</p></li><li><p>HOST域</p><p>在HTTP 1.0 中认为每台服务器都会绑定唯一的IP地址，所以，请求中的URL并没有传递主机名。但后来一台服务器上可能存在多个虚拟机，它们共享一个IP地址，所以HTTP 1.1中请求消息和响应消息都应该支持Host域。</p></li><li><p>带宽优化及网络连接的使用</p><p>在HTTP 1.0中会存在浪费带宽的现象，主要是因为不支持断点续传功能，客户端只是需要某个对象的一部分，服务端却将整个对象都传了过来。在HTTP 1.1中请求头引入了range头域，它支持只请求资源的某个部分，返回的状态码为206。</p></li></ul><p>HTTP 2.0的新特性</p><ul><li>新的二进制格式：HTTP 1.x的解析是基于文本，HTTP 2.0的解析采用二进制，实现方便，健壮性更好。</li><li>多路复用：每一个request对应一个id，一个连接上可以有多个request，每个连接的request可以随机混在一起，这样接收方可以根据request的id将request归属到各自不同的服务端请求里。</li><li>header压缩：在HTTP 1.x中，header携带大量信息，并且每次都需要重新发送，HTTP 2.0采用编码的方式减小了header的大小，同时通信双方各自缓存一份header fields表，避免了header的重复传输。</li><li>服务端推送：客户端在请求一个资源时，会把相关资源一起发给客户端，这样客户端就不需要再次发起请求。</li></ul><h3 id="Session、Cookie和Token的主要区别-＊＊＊"><a href="#Session、Cookie和Token的主要区别-＊＊＊" class="headerlink" title="Session、Cookie和Token的主要区别　＊＊＊"></a>Session、Cookie和Token的主要区别　＊＊＊</h3><p>HTTP协议是无状态的，即服务器无法判断用户身份。Session和Cookie可以用来进行身份辨认。</p><ul><li><p>Cookie</p><p>Cookie是保存在客户端一个小数据块，其中包含了用户信息。当客户端向服务端发起请求，服务端会像客户端浏览器发送一个Cookie，客户端会把Cookie存起来，当下次客户端再次请求服务端时，会携带上这个Cookie，服务端会通过这个Cookie来确定身份。</p></li><li><p>Session</p><p>Session是通过Cookie实现的，和Cookie不同的是，Session是存在服务端的。当客户端浏览器第一次访问服务器时，服务器会为浏览器创建一个sessionid，将sessionid放到Cookie中，存在客户端浏览器。比如浏览器访问的是购物网站，将一本《图解HTTP》放到了购物车，当浏览器再次访问服务器时，服务器会取出Cookie中的sessionid，并根据sessionid获取会话中的存储的信息，确认浏览器的身份是上次将《图解HTTP》放入到购物车那个用户。</p></li><li><p>Token</p><p>客户端在浏览器第一次访问服务端时，服务端生成的一串字符串作为Token发给客户端浏览器，下次浏览器在访问服务端时携带token即可无需验证用户名和密码，省下来大量的资源开销。看到这里很多人感觉这不是和sessionid作用一样吗？其实是不一样的，但是本文章主要针对面试，知识点很多，篇幅有限，几句话也解释不清楚，大家可以看看这篇文章，我觉得说的非常清楚了。<a href="https://blog.csdn.net/whl190412/article/details/90024671">cookie、session与token的真正区别</a></p></li></ul><h3 id="如果客户端禁止-cookie-能实现-session-还能用吗？-＊"><a href="#如果客户端禁止-cookie-能实现-session-还能用吗？-＊" class="headerlink" title="如果客户端禁止 cookie 能实现 session 还能用吗？　＊"></a>如果客户端禁止 cookie 能实现 session 还能用吗？　＊</h3><p>可以，Session的作用是在服务端来保持状态，通过sessionid来进行确认身份，但sessionid一般是通过Cookie来进行传递的。如果Cooike被禁用了，可以通过在URL中传递sessionid。</p><h3 id="在浏览器中输⼊url地址到显示主⻚的过程-＊＊＊"><a href="#在浏览器中输⼊url地址到显示主⻚的过程-＊＊＊" class="headerlink" title="在浏览器中输⼊url地址到显示主⻚的过程　＊＊＊"></a>在浏览器中输⼊url地址到显示主⻚的过程　＊＊＊</h3><blockquote><p>面试超高频的一道题，一般能说清楚流程就可以。</p></blockquote><ol><li>对输入到浏览器的url进行DNS解析，将域名转换为IP地址。</li><li>和目的服务器建立TCP连接</li><li>向目的服务器发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析并渲染页面</li></ol><h3 id="Servlet是线程安全的吗-＊"><a href="#Servlet是线程安全的吗-＊" class="headerlink" title="Servlet是线程安全的吗　＊"></a>Servlet是线程安全的吗　＊</h3><p>Servlet不是线程安全的，多线程的读写会导致数据不同步的问题。</p><p><a href="https://segmentfault.com/a/1190000038526729">一文搞定所有计算机网络面试题</a></p>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MMdetection使用教程</title>
      <link href="2021/04/30/MMdetection%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>2021/04/30/MMdetection%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="MMdetection使用教程"><a href="#MMdetection使用教程" class="headerlink" title="MMdetection使用教程"></a>MMdetection使用教程</h1><p>MMDetection 是一个基于 PyTorch 的目标检测开源工具箱。它是 <a href="https://openmmlab.com/">OpenMMLab</a> 项目的一部分。</p><p>主分支代码目前支持 PyTorch 1.3 以上的版本。</p><p>v1.x 的历史版本支持 PyTorch 1.1 到 1.4，但是我们强烈建议用户使用新的 2.x 的版本，新的版本速度更快，性能更高，有更优雅的代码设计，对用户使用也更加友好。</p><span id="more"></span> <p><strong>本地环境</strong><br>cuda10.2、<br>MMCV:1.3.2、<br>TorchVision: 0.6.1<br>OpenCV: 4.4.0<br>MMCV: 1.3.2<br>MMCV Compiler: GCC 7.3<br>MMCV CUDA Compiler: 10.2<br>MMDetection: 2.11.0+8d568fb<br>PyTorch: 1.5.1</p><h2 id="数据集配置"><a href="#数据集配置" class="headerlink" title="数据集配置"></a>数据集配置</h2><p>在mmdet下创建myDataset.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmcv.utils <span class="keyword">import</span> print_log</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmdet.core <span class="keyword">import</span> eval_map, eval_recalls</span><br><span class="line"><span class="keyword">from</span> .builder <span class="keyword">import</span> DATASETS</span><br><span class="line"><span class="keyword">from</span> .xml_style <span class="keyword">import</span> XMLDataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@DATASETS.register_module()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDataset</span>(<span class="params">XMLDataset</span>):</span></span><br><span class="line"></span><br><span class="line">    CLASSES = (<span class="string">&#x27;columnar&#x27;</span>, <span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyDataset, self).__init__(**kwargs)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;VOC2007&#x27;</span> <span class="keyword">in</span> self.img_prefix:</span><br><span class="line">            self.year = <span class="number">2007</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;VOC2012&#x27;</span> <span class="keyword">in</span> self.img_prefix:</span><br><span class="line">            self.year = <span class="number">2012</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Cannot infer dataset year from img_prefix&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 results,</span></span></span><br><span class="line"><span class="function"><span class="params">                 metric=<span class="string">&#x27;mAP&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 logger=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 proposal_nums=(<span class="params"><span class="number">100</span>, <span class="number">300</span>, <span class="number">1000</span></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">                 iou_thr=<span class="number">0.5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 scale_ranges=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Evaluate in VOC protocol.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            results (list[list | tuple]): Testing results of the dataset.</span></span><br><span class="line"><span class="string">            metric (str | list[str]): Metrics to be evaluated. Options are</span></span><br><span class="line"><span class="string">                &#x27;mAP&#x27;, &#x27;recall&#x27;.</span></span><br><span class="line"><span class="string">            logger (logging.Logger | str, optional): Logger used for printing</span></span><br><span class="line"><span class="string">                related information during evaluation. Default: None.</span></span><br><span class="line"><span class="string">            proposal_nums (Sequence[int]): Proposal number used for evaluating</span></span><br><span class="line"><span class="string">                recalls, such as recall@100, recall@1000.</span></span><br><span class="line"><span class="string">                Default: (100, 300, 1000).</span></span><br><span class="line"><span class="string">            iou_thr (float | list[float]): IoU threshold. Default: 0.5.</span></span><br><span class="line"><span class="string">            scale_ranges (list[tuple], optional): Scale ranges for evaluating</span></span><br><span class="line"><span class="string">                mAP. If not specified, all bounding boxes would be included in</span></span><br><span class="line"><span class="string">                evaluation. Default: None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            dict[str, float]: AP/recall metrics.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(metric, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(metric) == <span class="number">1</span></span><br><span class="line">            metric = metric[<span class="number">0</span>]</span><br><span class="line">        allowed_metrics = [<span class="string">&#x27;mAP&#x27;</span>, <span class="string">&#x27;recall&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> metric <span class="keyword">not</span> <span class="keyword">in</span> allowed_metrics:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">f&#x27;metric <span class="subst">&#123;metric&#125;</span> is not supported&#x27;</span>)</span><br><span class="line">        annotations = [self.get_ann_info(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self))]</span><br><span class="line">        eval_results = OrderedDict()</span><br><span class="line">        iou_thrs = [iou_thr] <span class="keyword">if</span> <span class="built_in">isinstance</span>(iou_thr, <span class="built_in">float</span>) <span class="keyword">else</span> iou_thr</span><br><span class="line">        <span class="keyword">if</span> metric == <span class="string">&#x27;mAP&#x27;</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(iou_thrs, <span class="built_in">list</span>)</span><br><span class="line">            <span class="keyword">if</span> self.year == <span class="number">2007</span>:</span><br><span class="line">                ds_name = <span class="string">&#x27;voc07&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ds_name = self.CLASSES</span><br><span class="line">            mean_aps = []</span><br><span class="line">            <span class="keyword">for</span> iou_thr <span class="keyword">in</span> iou_thrs:</span><br><span class="line">                print_log(<span class="string">f&#x27;\n<span class="subst">&#123;<span class="string">&quot;-&quot;</span> * <span class="number">15</span>&#125;</span>iou_thr: <span class="subst">&#123;iou_thr&#125;</span><span class="subst">&#123;<span class="string">&quot;-&quot;</span> * <span class="number">15</span>&#125;</span>&#x27;</span>)</span><br><span class="line">                mean_ap, _ = eval_map(</span><br><span class="line">                    results,</span><br><span class="line">                    annotations,</span><br><span class="line">                    scale_ranges=<span class="literal">None</span>,</span><br><span class="line">                    iou_thr=iou_thr,</span><br><span class="line">                    dataset=ds_name,</span><br><span class="line">                    logger=logger)</span><br><span class="line">                mean_aps.append(mean_ap)</span><br><span class="line">                eval_results[<span class="string">f&#x27;AP<span class="subst">&#123;<span class="built_in">int</span>(iou_thr * <span class="number">100</span>):02d&#125;</span>&#x27;</span>] = <span class="built_in">round</span>(mean_ap, <span class="number">3</span>)</span><br><span class="line">            eval_results[<span class="string">&#x27;mAP&#x27;</span>] = <span class="built_in">sum</span>(mean_aps) / <span class="built_in">len</span>(mean_aps)</span><br><span class="line">        <span class="keyword">elif</span> metric == <span class="string">&#x27;recall&#x27;</span>:</span><br><span class="line">            gt_bboxes = [ann[<span class="string">&#x27;bboxes&#x27;</span>] <span class="keyword">for</span> ann <span class="keyword">in</span> annotations]</span><br><span class="line">            recalls = eval_recalls(</span><br><span class="line">                gt_bboxes, results, proposal_nums, iou_thr, logger=logger)</span><br><span class="line">            <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(proposal_nums):</span><br><span class="line">                <span class="keyword">for</span> j, iou <span class="keyword">in</span> <span class="built_in">enumerate</span>(iou_thr):</span><br><span class="line">                    eval_results[<span class="string">f&#x27;recall@<span class="subst">&#123;num&#125;</span>@<span class="subst">&#123;iou&#125;</span>&#x27;</span>] = recalls[i, j]</span><br><span class="line">            <span class="keyword">if</span> recalls.shape[<span class="number">1</span>] &gt; <span class="number">1</span>:</span><br><span class="line">                ar = recalls.mean(axis=<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(proposal_nums):</span><br><span class="line">                    eval_results[<span class="string">f&#x27;AR@<span class="subst">&#123;num&#125;</span>&#x27;</span>] = ar[i]</span><br><span class="line">        <span class="keyword">return</span> eval_results</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实我用的是voc，只在里面改了<code> CLASSES = (&#39;columnar&#39;, &#39;linear&#39;)</code></p><p>之后要在```__init__.py``中注入MyDataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [</span><br><span class="line">    <span class="string">&#x27;CustomDataset&#x27;</span>, <span class="string">&#x27;XMLDataset&#x27;</span>, <span class="string">&#x27;CocoDataset&#x27;</span>, <span class="string">&#x27;DeepFashionDataset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;VOCDataset&#x27;</span>, <span class="string">&#x27;CityscapesDataset&#x27;</span>, <span class="string">&#x27;LVISDataset&#x27;</span>, <span class="string">&#x27;LVISV05Dataset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;LVISV1Dataset&#x27;</span>, <span class="string">&#x27;GroupSampler&#x27;</span>, <span class="string">&#x27;DistributedGroupSampler&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DistributedSampler&#x27;</span>, <span class="string">&#x27;build_dataloader&#x27;</span>, <span class="string">&#x27;ConcatDataset&#x27;</span>, <span class="string">&#x27;RepeatDataset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ClassBalancedDataset&#x27;</span>, <span class="string">&#x27;WIDERFaceDataset&#x27;</span>, <span class="string">&#x27;DATASETS&#x27;</span>, <span class="string">&#x27;PIPELINES&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;build_dataset&#x27;</span>, <span class="string">&#x27;replace_ImageToTensor&#x27;</span>, <span class="string">&#x27;get_loading_pipeline&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;NumClassCheckHook&#x27;</span>,<span class="string">&quot;MyDataset&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="配置模型"><a href="#配置模型" class="headerlink" title="配置模型"></a>配置模型</h2><p>此处使用FasterRCNN模型做测试</p><p>首先观察configs/faster_rcnn可以看到如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_base_ = [</span><br><span class="line">    <span class="string">&#x27;../_base_/models/faster_rcnn_r50_fpn.py&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;../_base_/datasets/coco_detection.py&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;../_base_/schedules/schedule_1x.py&#x27;</span>, <span class="string">&#x27;../_base_/default_runtime.py&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到一共4个配置，faster_rcnn以resnet50+fpn的backbone+neck的配置、数据集为coco数据集的配置、优化器，学习率，Epoch的配置、训练时断点日志等信息配置</p><p>仿写自己的模型如下</p><p>在configs/myconfigs/my_config_voc.py创建配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataset settings</span></span><br><span class="line">dataset_type = <span class="string">&#x27;MyDataset&#x27;</span></span><br><span class="line">data_root = <span class="string">&#x27;/home/hhy/mmdetection-master/data/VOCdevkit/&#x27;</span></span><br><span class="line"></span><br><span class="line">img_norm_cfg = <span class="built_in">dict</span>(</span><br><span class="line">    mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>], std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>], to_rgb=<span class="literal">True</span>)</span><br><span class="line">train_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadImageFromFile&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadAnnotations&#x27;</span>, with_bbox=<span class="literal">True</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>, img_scale=(<span class="number">1000</span>, <span class="number">600</span>), keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomFlip&#x27;</span>, flip_ratio=<span class="number">0.5</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Normalize&#x27;</span>, **img_norm_cfg),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Pad&#x27;</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;DefaultFormatBundle&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Collect&#x27;</span>, keys=[<span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;gt_bboxes&#x27;</span>, <span class="string">&#x27;gt_labels&#x27;</span>]),</span><br><span class="line">]</span><br><span class="line">test_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadImageFromFile&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;MultiScaleFlipAug&#x27;</span>,</span><br><span class="line">        img_scale=(<span class="number">1000</span>, <span class="number">600</span>),</span><br><span class="line">        flip=<span class="literal">False</span>,</span><br><span class="line">        transforms=[</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>, keep_ratio=<span class="literal">True</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomFlip&#x27;</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Normalize&#x27;</span>, **img_norm_cfg),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Pad&#x27;</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;ImageToTensor&#x27;</span>, keys=[<span class="string">&#x27;img&#x27;</span>]),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Collect&#x27;</span>, keys=[<span class="string">&#x27;img&#x27;</span>]),</span><br><span class="line">        ])</span><br><span class="line">]</span><br><span class="line">data = <span class="built_in">dict</span>(</span><br><span class="line">    samples_per_gpu=<span class="number">2</span>,</span><br><span class="line">    workers_per_gpu=<span class="number">2</span>,</span><br><span class="line">    train=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;RepeatDataset&#x27;</span>,</span><br><span class="line">        times=<span class="number">3</span>,</span><br><span class="line">        dataset=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=dataset_type,</span><br><span class="line">            ann_file=[</span><br><span class="line">                data_root + <span class="string">&#x27;VOC2007/ImageSets/Main/trainval.txt&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            img_prefix=[data_root + <span class="string">&#x27;VOC2007/&#x27;</span>],</span><br><span class="line">            pipeline=train_pipeline)),</span><br><span class="line">    val=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br><span class="line">        ann_file=data_root + <span class="string">&#x27;VOC2007/ImageSets/Main/test.txt&#x27;</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">&#x27;VOC2007/&#x27;</span>,</span><br><span class="line">        pipeline=test_pipeline),</span><br><span class="line">    test=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br><span class="line">        ann_file=data_root + <span class="string">&#x27;VOC2007/ImageSets/Main/test.txt&#x27;</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">&#x27;VOC2007/&#x27;</span>,</span><br><span class="line">        pipeline=test_pipeline))</span><br><span class="line">evaluation = <span class="built_in">dict</span>(interval=<span class="number">1</span>, metric=<span class="string">&#x27;mAP&#x27;</span>)</span><br><span class="line"></span><br><span class="line">checkpoint_config = <span class="built_in">dict</span>(interval=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># yapf:disable</span></span><br><span class="line">log_config = <span class="built_in">dict</span>(</span><br><span class="line">    interval=<span class="number">50</span>,</span><br><span class="line">    hooks=[</span><br><span class="line">        <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;TextLoggerHook&#x27;</span>),</span><br><span class="line">        <span class="comment"># dict(type=&#x27;TensorboardLoggerHook&#x27;)</span></span><br><span class="line">    ])</span><br><span class="line"><span class="comment"># yapf:enable</span></span><br><span class="line">custom_hooks = [<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;NumClassCheckHook&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">##-------------------------------default_runtime-------------------------------##</span></span><br><span class="line">dist_params = <span class="built_in">dict</span>(backend=<span class="string">&#x27;nccl&#x27;</span>)</span><br><span class="line">log_level = <span class="string">&#x27;INFO&#x27;</span></span><br><span class="line">load_from = <span class="literal">None</span></span><br><span class="line">resume_from = <span class="literal">None</span></span><br><span class="line">workflow = [(<span class="string">&#x27;train&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">##------------------------------faster_rcnn_r50_fpn-----------------------------##</span></span><br><span class="line"><span class="comment"># model settings</span></span><br><span class="line">model = <span class="built_in">dict</span>(</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">&#x27;FasterRCNN&#x27;</span>,</span><br><span class="line">    pretrained=<span class="string">&#x27;torchvision://resnet50&#x27;</span>,</span><br><span class="line">    backbone=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;ResNet&#x27;</span>,</span><br><span class="line">        depth=<span class="number">50</span>,</span><br><span class="line">        num_stages=<span class="number">4</span>,</span><br><span class="line">        out_indices=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        frozen_stages=<span class="number">1</span>,</span><br><span class="line">        norm_cfg=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;BN&#x27;</span>, requires_grad=<span class="literal">True</span>),</span><br><span class="line">        norm_eval=<span class="literal">True</span>,</span><br><span class="line">        style=<span class="string">&#x27;pytorch&#x27;</span>),</span><br><span class="line">    neck=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;FPN&#x27;</span>,</span><br><span class="line">        in_channels=[<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>],</span><br><span class="line">        out_channels=<span class="number">256</span>,</span><br><span class="line">        num_outs=<span class="number">5</span>),</span><br><span class="line">    rpn_head=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;RPNHead&#x27;</span>,</span><br><span class="line">        in_channels=<span class="number">256</span>,</span><br><span class="line">        feat_channels=<span class="number">256</span>,</span><br><span class="line">        anchor_generator=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;AnchorGenerator&#x27;</span>,</span><br><span class="line">            scales=[<span class="number">8</span>],</span><br><span class="line">            ratios=[<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">2.0</span>],</span><br><span class="line">            strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>]),</span><br><span class="line">        bbox_coder=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;DeltaXYWHBBoxCoder&#x27;</span>,</span><br><span class="line">            target_means=[<span class="number">.0</span>, <span class="number">.0</span>, <span class="number">.0</span>, <span class="number">.0</span>],</span><br><span class="line">            target_stds=[<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>]),</span><br><span class="line">        loss_cls=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;CrossEntropyLoss&#x27;</span>, use_sigmoid=<span class="literal">True</span>, loss_weight=<span class="number">1.0</span>),</span><br><span class="line">        loss_bbox=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;L1Loss&#x27;</span>, loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">    roi_head=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;StandardRoIHead&#x27;</span>,</span><br><span class="line">        bbox_roi_extractor=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;SingleRoIExtractor&#x27;</span>,</span><br><span class="line">            roi_layer=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RoIAlign&#x27;</span>, output_size=<span class="number">7</span>, sampling_ratio=<span class="number">0</span>),</span><br><span class="line">            out_channels=<span class="number">256</span>,</span><br><span class="line">            featmap_strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>]),</span><br><span class="line">        bbox_head=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;Shared2FCBBoxHead&#x27;</span>,</span><br><span class="line">            in_channels=<span class="number">256</span>,</span><br><span class="line">            fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">            roi_feat_size=<span class="number">7</span>,</span><br><span class="line">            num_classes=<span class="number">2</span>,</span><br><span class="line">            bbox_coder=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;DeltaXYWHBBoxCoder&#x27;</span>,</span><br><span class="line">                target_means=[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">                target_stds=[<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.2</span>]),</span><br><span class="line">            reg_class_agnostic=<span class="literal">False</span>,</span><br><span class="line">            loss_cls=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;CrossEntropyLoss&#x27;</span>, use_sigmoid=<span class="literal">False</span>, loss_weight=<span class="number">1.0</span>),</span><br><span class="line">            loss_bbox=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;L1Loss&#x27;</span>, loss_weight=<span class="number">1.0</span>))),</span><br><span class="line">    <span class="comment"># model training and testing settings</span></span><br><span class="line">    train_cfg=<span class="built_in">dict</span>(</span><br><span class="line">        rpn=<span class="built_in">dict</span>(</span><br><span class="line">            assigner=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;MaxIoUAssigner&#x27;</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.3</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.3</span>,</span><br><span class="line">                match_low_quality=<span class="literal">True</span>,</span><br><span class="line">                ignore_iof_thr=-<span class="number">1</span>),</span><br><span class="line">            sampler=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;RandomSampler&#x27;</span>,</span><br><span class="line">                num=<span class="number">256</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.5</span>,</span><br><span class="line">                neg_pos_ub=-<span class="number">1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">False</span>),</span><br><span class="line">            allowed_border=-<span class="number">1</span>,</span><br><span class="line">            pos_weight=-<span class="number">1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>),</span><br><span class="line">        rpn_proposal=<span class="built_in">dict</span>(</span><br><span class="line">            nms_pre=<span class="number">2000</span>,</span><br><span class="line">            max_per_img=<span class="number">1000</span>,</span><br><span class="line">            nms=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;nms&#x27;</span>, iou_threshold=<span class="number">0.7</span>),</span><br><span class="line">            min_bbox_size=<span class="number">0</span>),</span><br><span class="line">        rcnn=<span class="built_in">dict</span>(</span><br><span class="line">            assigner=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;MaxIoUAssigner&#x27;</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.5</span>,</span><br><span class="line">                match_low_quality=<span class="literal">False</span>,</span><br><span class="line">                ignore_iof_thr=-<span class="number">1</span>),</span><br><span class="line">            sampler=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;RandomSampler&#x27;</span>,</span><br><span class="line">                num=<span class="number">512</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">                neg_pos_ub=-<span class="number">1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">            pos_weight=-<span class="number">1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>)),</span><br><span class="line">    test_cfg=<span class="built_in">dict</span>(</span><br><span class="line">        rpn=<span class="built_in">dict</span>(</span><br><span class="line">            nms_pre=<span class="number">1000</span>,</span><br><span class="line">            max_per_img=<span class="number">1000</span>,</span><br><span class="line">            nms=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;nms&#x27;</span>, iou_threshold=<span class="number">0.7</span>),</span><br><span class="line">            min_bbox_size=<span class="number">0</span>),</span><br><span class="line">        rcnn=<span class="built_in">dict</span>(</span><br><span class="line">            score_thr=<span class="number">0.05</span>,</span><br><span class="line">            nms=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;nms&#x27;</span>, iou_threshold=<span class="number">0.5</span>),</span><br><span class="line">            max_per_img=<span class="number">100</span>)</span><br><span class="line">        <span class="comment"># soft-nms is also supported for rcnn testing</span></span><br><span class="line">        <span class="comment"># e.g., nms=dict(type=&#x27;soft_nms&#x27;, iou_threshold=0.5, min_score=0.05)</span></span><br><span class="line">    ))</span><br><span class="line">optimizer = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;SGD&#x27;</span>, lr=<span class="number">0.02</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0001</span>)</span><br><span class="line">optimizer_config = <span class="built_in">dict</span>(grad_clip=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># learning policy</span></span><br><span class="line">lr_config = <span class="built_in">dict</span>(</span><br><span class="line">    policy=<span class="string">&#x27;step&#x27;</span>,</span><br><span class="line">    warmup=<span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">    warmup_iters=<span class="number">500</span>,</span><br><span class="line">    warmup_ratio=<span class="number">0.001</span>,</span><br><span class="line">    step=[<span class="number">8</span>, <span class="number">11</span>])</span><br><span class="line">runner = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;EpochBasedRunner&#x27;</span>, max_epochs=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="mmdetection训练损失为nan的问题"><a href="#mmdetection训练损失为nan的问题" class="headerlink" title="mmdetection训练损失为nan的问题"></a>mmdetection训练损失为nan的问题</h3><ol><li><p>调小学习率<br>一般出现loss nan，无非是网络传输的梯度过大导致的，所以首先考虑减小模型的学习率。可是学习率调小100倍甚至10000倍，还出现nan的情况，所以考虑其他原因导致。先排除学习率的影响，将学习率设为0，loss依旧nan，然后就可以尝试下一个了。</p></li><li><p>梯度裁剪<br>在学习率为0的情况下，进行梯度裁剪。在模型配置里schedule_1x.py，加上grad_clip</p></li></ol><p>optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))<br>依旧出现loss nan，这时有点蒙了。</p><ol start="3"><li>数据清洗<br>在github上看到有人分享经验，mmdetection v2版本，在gt的box和image的重叠区域为0时，会出现loss nan的情况，于是，我查了一边……庞！大！的！数据。发现，还真是数据出的问题。就是有11张图size很大的图在labelImg标注时，旋转了90度，也就是手机采集的竖长的图，到了LabelImg里变成横的了，标注的坐标信息也是这个横着的，而原图是竖着的，所以，标注的box在原图就有对不上的情况，处理掉这个，loss nan情况消失。</li></ol><p>训练模型的时候，会遇到各种各样的问题，可能要调很多参数，要根据现象进行分析，把可能的原因都排查一遍，最直接的做法就是排除法，把最好排查的因素排除了，就会逐渐清晰。<br><strong>本人调小学习率就可以解决问题</strong></p><p><strong>在数据清洗的时候发现本人数据集里出现其他文件，也是造成损失为nan的原因</strong></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合练习</title>
      <link href="2021/03/23/SSM%E6%95%B4%E5%90%88%E7%BB%83%E4%B9%A0/"/>
      <url>2021/03/23/SSM%E6%95%B4%E5%90%88%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Prepare1：数据库创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create database ssm;</span><br><span class="line">Create table account(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">    name varchar(100),</span><br><span class="line">    money double(7,2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Prepare2:Maven工程创建</p><p>​    Q:需要添加什么依赖？</p><p>​    A：从dao层开始思考：</p><p>​        dao:mysql数据库驱动、JDBC连接池Druid、mybatis、mybatis-spring</p><p>​        service:spring-core、spring-aop、spring-aspect、servlet-api</p><p>​        web:spring-webmvc、jsp-api、jstl</p><p>​        test:Junit</p><p>​        日志:log4J</p><p>​        插件:tomcat、maven-compiler</p><p>Prepare3:编写实体类POJO</p><p>Prepare4:编写Mapper接口</p><p>​        mybatis相当于取消dao层使用daoMapper接口替换</p><p>Prepare5:编写Controller</p><p>Prepare6:jsp页面编写</p><p>重点学习：配置文件编写</p><ul><li><p>Spring配置文件ApplicationContext-service.xml</p></li><li><p>springmvc配置文件编写spring-mvl.xml</p></li><li><p>mybatis配置文件编写sqlMapConfig.xml、AccountMapper.xml</p></li><li><p>web.xml配置文件编写</p></li><li><p>jdbc配置文件编写jdbc.properties</p><p>A:从web.xml开始</p><ul><li><p>web.xml需要配置listener:ContextLoaderListener</p><p>servlet:DispatcherServlet、filter:CharacterEncodingFilter</p><p>context-param:spring配置文件资源位置</p></li></ul></li></ul><ul><li>ApplicationContext需要配置bean:{SqlSessionFactory}在基本的MyBatis种，session工厂可以使用SqlSessionFactoryBuilder来创建。而在Mybatis-Spring中，则使用SqlSessionFactoryBean来替代。其需要注入两个属性dataSource和mapper映射关系</li><li>spring-mvc需要配置:component-scan、annotaion-driven、internalResourceViewResolver、default-servlet-handler</li><li></li></ul><p>springmvc需要配置InternalResourceResolver</p><p>  spring需要配置注入(/编织)</p><p>  mybatis需要配置mapper</p><p>tips:</p><p>​    1.jdbc.properties编写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?serverTimezone&#x3D;GMT</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;997739480</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CspDarkNet53学习</title>
      <link href="2021/03/23/CspDarkNet53%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/03/23/CspDarkNet53%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="CSP结构"><a href="#CSP结构" class="headerlink" title="CSP结构"></a>CSP结构</h2><h3 id="Applying-CSPNet-to-ResNe-X-t"><a href="#Applying-CSPNet-to-ResNe-X-t" class="headerlink" title="Applying CSPNet to ResNe(X)t"></a>Applying CSPNet to ResNe(X)t</h3><p><img src="https://img-blog.csdnimg.cn/20201225145340414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTg0MTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>原文如此介绍：设计出Partial transition layers的目的是最大化梯度联合的差异。其使用梯度流截断的手段避免不同的层学习到重复的梯度信息。得出的结论是，如果能够有效的减少重复的梯度学习，那么网络的学习能力能够大大提升.</p><h3 id="Applying-CSPNet-to-DenseNet"><a href="#Applying-CSPNet-to-DenseNet" class="headerlink" title="Applying CSPNet to DenseNet"></a>Applying CSPNet to DenseNet</h3><p><img src="https://img-blog.csdnimg.cn/2020122514555768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTg0MTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="DarkNet53介绍"><a href="#DarkNet53介绍" class="headerlink" title="DarkNet53介绍"></a>DarkNet53介绍</h3><p><img src="https://img-blog.csdnimg.cn/20201225145707759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTg0MTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由上我们可以对比ResNet50得出其使用了<code>kernel_size=3，stride=1</code>的卷积代替了<code>kernel_size=7，stride=1</code>的卷积，减少了计算量。使用了<code>kernel_size=3,stride=1</code>的卷积代替了<code>maxpool</code>，因此作者认为Max-Pooling降采样会使得输出变得“高频高幅”，因此在后面会导致网格效应。此外DarkNet含有5个Residual相比于Resnet的4个stage,其中<code>Residual Block</code>中分支路使用的为<code>kernel_size=1,kernel_size=3,stride=1</code>的Conv，注意此处并没有进行降采样，而是在<code>concat</code>操作后<code>stride=2</code>的卷积进行下采样。</p><h3 id="CSPDarknet53架构"><a href="#CSPDarknet53架构" class="headerlink" title="CSPDarknet53架构"></a>CSPDarknet53架构</h3><p><img src="https://img-blog.csdnimg.cn/20201225151012679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTg0MTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>采用博主@Bubbliiiing的YOLOV4实现讲解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import math</span><br><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">#-------------------------------------------------#</span><br><span class="line">#   MISH激活函数</span><br><span class="line">#-------------------------------------------------#</span><br><span class="line">class Mish(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Mish, self).__init__()</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        return x * torch.tanh(F.softplus(x))</span><br><span class="line"></span><br><span class="line">#-------------------------------------------------#</span><br><span class="line">#   卷积块</span><br><span class="line">#   CONV+BATCHNORM+MISH</span><br><span class="line">#-------------------------------------------------#</span><br><span class="line">class BasicConv(nn.Module):</span><br><span class="line">    def __init__(self, in_channels, out_channels, kernel_size, stride&#x3D;1):</span><br><span class="line">        super(BasicConv, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.conv &#x3D; nn.Conv2d(in_channels, out_channels, kernel_size, stride, kernel_size&#x2F;&#x2F;2, bias&#x3D;False)</span><br><span class="line">        self.bn &#x3D; nn.BatchNorm2d(out_channels)</span><br><span class="line">        self.activation &#x3D; Mish()</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.conv(x)</span><br><span class="line">        x &#x3D; self.bn(x)</span><br><span class="line">        x &#x3D; self.activation(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">#   CSPdarknet的结构块的组成部分</span><br><span class="line">#   内部堆叠的残差块</span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">class Resblock(nn.Module):</span><br><span class="line">    def __init__(self, channels, hidden_channels&#x3D;None, residual_activation&#x3D;nn.Identity()):</span><br><span class="line">        super(Resblock, self).__init__()</span><br><span class="line"></span><br><span class="line">        if hidden_channels is None:</span><br><span class="line">            hidden_channels &#x3D; channels</span><br><span class="line"></span><br><span class="line">        self.block &#x3D; nn.Sequential(</span><br><span class="line">            BasicConv(channels, hidden_channels, 1),</span><br><span class="line">            BasicConv(hidden_channels, channels, 3)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        return x+self.block(x)</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">#   CSPdarknet的结构块</span><br><span class="line">#   存在一个大残差边</span><br><span class="line">#   这个大残差边绕过了很多的残差结构</span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">class Resblock_body(nn.Module):</span><br><span class="line">    def __init__(self, in_channels, out_channels, num_blocks, first):</span><br><span class="line">        super(Resblock_body, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.downsample_conv &#x3D; BasicConv(in_channels, out_channels, 3, stride&#x3D;2)</span><br><span class="line"></span><br><span class="line">        if first:</span><br><span class="line">            self.split_conv0 &#x3D; BasicConv(out_channels, out_channels, 1)</span><br><span class="line">            self.split_conv1 &#x3D; BasicConv(out_channels, out_channels, 1)  </span><br><span class="line">            self.blocks_conv &#x3D; nn.Sequential(</span><br><span class="line">                Resblock(channels&#x3D;out_channels, hidden_channels&#x3D;out_channels&#x2F;&#x2F;2),</span><br><span class="line">                BasicConv(out_channels, out_channels, 1)</span><br><span class="line">            )</span><br><span class="line">            self.concat_conv &#x3D; BasicConv(out_channels*2, out_channels, 1)</span><br><span class="line">        else:</span><br><span class="line">            self.split_conv0 &#x3D; BasicConv(out_channels, out_channels&#x2F;&#x2F;2, 1)</span><br><span class="line">            self.split_conv1 &#x3D; BasicConv(out_channels, out_channels&#x2F;&#x2F;2, 1)</span><br><span class="line"></span><br><span class="line">            self.blocks_conv &#x3D; nn.Sequential(</span><br><span class="line">                *[Resblock(out_channels&#x2F;&#x2F;2) for _ in range(num_blocks)],</span><br><span class="line">                BasicConv(out_channels&#x2F;&#x2F;2, out_channels&#x2F;&#x2F;2, 1)</span><br><span class="line">            )</span><br><span class="line">            self.concat_conv &#x3D; BasicConv(out_channels, out_channels, 1)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.downsample_conv(x)</span><br><span class="line"></span><br><span class="line">        x0 &#x3D; self.split_conv0(x)</span><br><span class="line"></span><br><span class="line">        x1 &#x3D; self.split_conv1(x)</span><br><span class="line">        x1 &#x3D; self.blocks_conv(x1)</span><br><span class="line"></span><br><span class="line">        x &#x3D; torch.cat([x1, x0], dim&#x3D;1)</span><br><span class="line">        x &#x3D; self.concat_conv(x)</span><br><span class="line"></span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">class CSPDarkNet(nn.Module):</span><br><span class="line">    def __init__(self, layers):</span><br><span class="line">        super(CSPDarkNet, self).__init__()</span><br><span class="line">        self.inplanes &#x3D; 32</span><br><span class="line">        self.conv1 &#x3D; BasicConv(3, self.inplanes, kernel_size&#x3D;3, stride&#x3D;1)</span><br><span class="line">        self.feature_channels &#x3D; [64, 128, 256, 512, 1024]</span><br><span class="line"></span><br><span class="line">        self.stages &#x3D; nn.ModuleList([</span><br><span class="line">            Resblock_body(self.inplanes, self.feature_channels[0], layers[0], first&#x3D;True),</span><br><span class="line">            Resblock_body(self.feature_channels[0], self.feature_channels[1], layers[1], first&#x3D;False),</span><br><span class="line">            Resblock_body(self.feature_channels[1], self.feature_channels[2], layers[2], first&#x3D;False),</span><br><span class="line">            Resblock_body(self.feature_channels[2], self.feature_channels[3], layers[3], first&#x3D;False),</span><br><span class="line">            Resblock_body(self.feature_channels[3], self.feature_channels[4], layers[4], first&#x3D;False)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        self.num_features &#x3D; 1</span><br><span class="line">        # 进行权值初始化</span><br><span class="line">        for m in self.modules():</span><br><span class="line">            if isinstance(m, nn.Conv2d):</span><br><span class="line">                n &#x3D; m.kernel_size[0] * m.kernel_size[1] * m.out_channels</span><br><span class="line">                m.weight.data.normal_(0, math.sqrt(2. &#x2F; n))</span><br><span class="line">            elif isinstance(m, nn.BatchNorm2d):</span><br><span class="line">                m.weight.data.fill_(1)</span><br><span class="line">                m.bias.data.zero_()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.conv1(x)</span><br><span class="line"></span><br><span class="line">        x &#x3D; self.stages[0](x)</span><br><span class="line">        x &#x3D; self.stages[1](x)</span><br><span class="line">        out3 &#x3D; self.stages[2](x)</span><br><span class="line">        out4 &#x3D; self.stages[3](out3)</span><br><span class="line">        out5 &#x3D; self.stages[4](out4)</span><br><span class="line"></span><br><span class="line">        return out3, out4, out5</span><br><span class="line"></span><br><span class="line">def darknet53(pretrained, **kwargs):</span><br><span class="line">    model &#x3D; CSPDarkNet([1, 2, 8, 8, 4])</span><br><span class="line">    if pretrained:</span><br><span class="line">        if isinstance(pretrained, str):</span><br><span class="line">            model.load_state_dict(torch.load(pretrained))</span><br><span class="line">        else:</span><br><span class="line">            raise Exception(&quot;darknet request a pretrained path. got [&#123;&#125;]&quot;.format(pretrained))</span><br><span class="line">    return model</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好，讲完了。嘻嘻<br><br><br><strong>首先3x3,stride=1的卷积通道压缩，进入Resblock1。<br>ResBlock1先降采样(减小后续计算量)，走paritial transition路线,分支为两个1x1，stride=1的卷积。其中一个分支走residual block路线。<br>结束后进行x0,x1拼接，拼接后在进行一次卷积</strong><br>由于先进行降采样，因此计算量，计算速度大大减小。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1].<a href="https://zhuanlan.zhihu.com/p/56269115">关于ResNet及其变体的总结（下）</a><br>[2].<a href="https://blog.csdn.net/weixin_44791964/article/details/106214657">睿智的目标检测30——Pytorch搭建YoloV4目标检测平台</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> backBone </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
