<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/04/30/MMdetection%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>2021/04/30/MMdetection%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="MMdetection使用教程"><a href="#MMdetection使用教程" class="headerlink" title="MMdetection使用教程"></a>MMdetection使用教程</h1><p><strong>本地环境</strong><br>cuda10.2、<br>MMCV:1.3.2、<br>TorchVision: 0.6.1<br>OpenCV: 4.4.0<br>MMCV: 1.3.2<br>MMCV Compiler: GCC 7.3<br>MMCV CUDA Compiler: 10.2<br>MMDetection: 2.11.0+8d568fb<br>PyTorch: 1.5.1</p><h2 id="数据集配置"><a href="#数据集配置" class="headerlink" title="数据集配置"></a>数据集配置</h2><p>在mmdet下创建myDataset.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmcv.utils <span class="keyword">import</span> print_log</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmdet.core <span class="keyword">import</span> eval_map, eval_recalls</span><br><span class="line"><span class="keyword">from</span> .builder <span class="keyword">import</span> DATASETS</span><br><span class="line"><span class="keyword">from</span> .xml_style <span class="keyword">import</span> XMLDataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@DATASETS.register_module()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDataset</span>(<span class="params">XMLDataset</span>):</span></span><br><span class="line"></span><br><span class="line">    CLASSES = (<span class="string">&#x27;columnar&#x27;</span>, <span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyDataset, self).__init__(**kwargs)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;VOC2007&#x27;</span> <span class="keyword">in</span> self.img_prefix:</span><br><span class="line">            self.year = <span class="number">2007</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;VOC2012&#x27;</span> <span class="keyword">in</span> self.img_prefix:</span><br><span class="line">            self.year = <span class="number">2012</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Cannot infer dataset year from img_prefix&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 results,</span></span></span><br><span class="line"><span class="function"><span class="params">                 metric=<span class="string">&#x27;mAP&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 logger=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 proposal_nums=(<span class="params"><span class="number">100</span>, <span class="number">300</span>, <span class="number">1000</span></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">                 iou_thr=<span class="number">0.5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 scale_ranges=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Evaluate in VOC protocol.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            results (list[list | tuple]): Testing results of the dataset.</span></span><br><span class="line"><span class="string">            metric (str | list[str]): Metrics to be evaluated. Options are</span></span><br><span class="line"><span class="string">                &#x27;mAP&#x27;, &#x27;recall&#x27;.</span></span><br><span class="line"><span class="string">            logger (logging.Logger | str, optional): Logger used for printing</span></span><br><span class="line"><span class="string">                related information during evaluation. Default: None.</span></span><br><span class="line"><span class="string">            proposal_nums (Sequence[int]): Proposal number used for evaluating</span></span><br><span class="line"><span class="string">                recalls, such as recall@100, recall@1000.</span></span><br><span class="line"><span class="string">                Default: (100, 300, 1000).</span></span><br><span class="line"><span class="string">            iou_thr (float | list[float]): IoU threshold. Default: 0.5.</span></span><br><span class="line"><span class="string">            scale_ranges (list[tuple], optional): Scale ranges for evaluating</span></span><br><span class="line"><span class="string">                mAP. If not specified, all bounding boxes would be included in</span></span><br><span class="line"><span class="string">                evaluation. Default: None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            dict[str, float]: AP/recall metrics.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(metric, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(metric) == <span class="number">1</span></span><br><span class="line">            metric = metric[<span class="number">0</span>]</span><br><span class="line">        allowed_metrics = [<span class="string">&#x27;mAP&#x27;</span>, <span class="string">&#x27;recall&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> metric <span class="keyword">not</span> <span class="keyword">in</span> allowed_metrics:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">f&#x27;metric <span class="subst">&#123;metric&#125;</span> is not supported&#x27;</span>)</span><br><span class="line">        annotations = [self.get_ann_info(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self))]</span><br><span class="line">        eval_results = OrderedDict()</span><br><span class="line">        iou_thrs = [iou_thr] <span class="keyword">if</span> <span class="built_in">isinstance</span>(iou_thr, <span class="built_in">float</span>) <span class="keyword">else</span> iou_thr</span><br><span class="line">        <span class="keyword">if</span> metric == <span class="string">&#x27;mAP&#x27;</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(iou_thrs, <span class="built_in">list</span>)</span><br><span class="line">            <span class="keyword">if</span> self.year == <span class="number">2007</span>:</span><br><span class="line">                ds_name = <span class="string">&#x27;voc07&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ds_name = self.CLASSES</span><br><span class="line">            mean_aps = []</span><br><span class="line">            <span class="keyword">for</span> iou_thr <span class="keyword">in</span> iou_thrs:</span><br><span class="line">                print_log(<span class="string">f&#x27;\n<span class="subst">&#123;<span class="string">&quot;-&quot;</span> * <span class="number">15</span>&#125;</span>iou_thr: <span class="subst">&#123;iou_thr&#125;</span><span class="subst">&#123;<span class="string">&quot;-&quot;</span> * <span class="number">15</span>&#125;</span>&#x27;</span>)</span><br><span class="line">                mean_ap, _ = eval_map(</span><br><span class="line">                    results,</span><br><span class="line">                    annotations,</span><br><span class="line">                    scale_ranges=<span class="literal">None</span>,</span><br><span class="line">                    iou_thr=iou_thr,</span><br><span class="line">                    dataset=ds_name,</span><br><span class="line">                    logger=logger)</span><br><span class="line">                mean_aps.append(mean_ap)</span><br><span class="line">                eval_results[<span class="string">f&#x27;AP<span class="subst">&#123;<span class="built_in">int</span>(iou_thr * <span class="number">100</span>):02d&#125;</span>&#x27;</span>] = <span class="built_in">round</span>(mean_ap, <span class="number">3</span>)</span><br><span class="line">            eval_results[<span class="string">&#x27;mAP&#x27;</span>] = <span class="built_in">sum</span>(mean_aps) / <span class="built_in">len</span>(mean_aps)</span><br><span class="line">        <span class="keyword">elif</span> metric == <span class="string">&#x27;recall&#x27;</span>:</span><br><span class="line">            gt_bboxes = [ann[<span class="string">&#x27;bboxes&#x27;</span>] <span class="keyword">for</span> ann <span class="keyword">in</span> annotations]</span><br><span class="line">            recalls = eval_recalls(</span><br><span class="line">                gt_bboxes, results, proposal_nums, iou_thr, logger=logger)</span><br><span class="line">            <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(proposal_nums):</span><br><span class="line">                <span class="keyword">for</span> j, iou <span class="keyword">in</span> <span class="built_in">enumerate</span>(iou_thr):</span><br><span class="line">                    eval_results[<span class="string">f&#x27;recall@<span class="subst">&#123;num&#125;</span>@<span class="subst">&#123;iou&#125;</span>&#x27;</span>] = recalls[i, j]</span><br><span class="line">            <span class="keyword">if</span> recalls.shape[<span class="number">1</span>] &gt; <span class="number">1</span>:</span><br><span class="line">                ar = recalls.mean(axis=<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(proposal_nums):</span><br><span class="line">                    eval_results[<span class="string">f&#x27;AR@<span class="subst">&#123;num&#125;</span>&#x27;</span>] = ar[i]</span><br><span class="line">        <span class="keyword">return</span> eval_results</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实我用的是voc，只在里面改了<code> CLASSES = (&#39;columnar&#39;, &#39;linear&#39;)</code></p><p>之后要在```__init__.py``中注入MyDataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [</span><br><span class="line">    <span class="string">&#x27;CustomDataset&#x27;</span>, <span class="string">&#x27;XMLDataset&#x27;</span>, <span class="string">&#x27;CocoDataset&#x27;</span>, <span class="string">&#x27;DeepFashionDataset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;VOCDataset&#x27;</span>, <span class="string">&#x27;CityscapesDataset&#x27;</span>, <span class="string">&#x27;LVISDataset&#x27;</span>, <span class="string">&#x27;LVISV05Dataset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;LVISV1Dataset&#x27;</span>, <span class="string">&#x27;GroupSampler&#x27;</span>, <span class="string">&#x27;DistributedGroupSampler&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DistributedSampler&#x27;</span>, <span class="string">&#x27;build_dataloader&#x27;</span>, <span class="string">&#x27;ConcatDataset&#x27;</span>, <span class="string">&#x27;RepeatDataset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ClassBalancedDataset&#x27;</span>, <span class="string">&#x27;WIDERFaceDataset&#x27;</span>, <span class="string">&#x27;DATASETS&#x27;</span>, <span class="string">&#x27;PIPELINES&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;build_dataset&#x27;</span>, <span class="string">&#x27;replace_ImageToTensor&#x27;</span>, <span class="string">&#x27;get_loading_pipeline&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;NumClassCheckHook&#x27;</span>,<span class="string">&quot;MyDataset&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="配置模型"><a href="#配置模型" class="headerlink" title="配置模型"></a>配置模型</h2><p>此处使用FasterRCNN模型做测试</p><p>首先观察configs/faster_rcnn可以看到如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_base_ = [</span><br><span class="line">    <span class="string">&#x27;../_base_/models/faster_rcnn_r50_fpn.py&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;../_base_/datasets/coco_detection.py&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;../_base_/schedules/schedule_1x.py&#x27;</span>, <span class="string">&#x27;../_base_/default_runtime.py&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到一共4个配置，faster_rcnn以resnet50+fpn的backbone+neck的配置、数据集为coco数据集的配置、优化器，学习率，Epoch的配置、训练时断点日志等信息配置</p><p>仿写自己的模型如下</p><p>在configs/myconfigs/my_config_voc.py创建配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataset settings</span></span><br><span class="line">dataset_type = <span class="string">&#x27;MyDataset&#x27;</span></span><br><span class="line">data_root = <span class="string">&#x27;/home/hhy/mmdetection-master/data/VOCdevkit/&#x27;</span></span><br><span class="line"></span><br><span class="line">img_norm_cfg = <span class="built_in">dict</span>(</span><br><span class="line">    mean=[<span class="number">123.675</span>, <span class="number">116.28</span>, <span class="number">103.53</span>], std=[<span class="number">58.395</span>, <span class="number">57.12</span>, <span class="number">57.375</span>], to_rgb=<span class="literal">True</span>)</span><br><span class="line">train_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadImageFromFile&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadAnnotations&#x27;</span>, with_bbox=<span class="literal">True</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>, img_scale=(<span class="number">1000</span>, <span class="number">600</span>), keep_ratio=<span class="literal">True</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomFlip&#x27;</span>, flip_ratio=<span class="number">0.5</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Normalize&#x27;</span>, **img_norm_cfg),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Pad&#x27;</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;DefaultFormatBundle&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Collect&#x27;</span>, keys=[<span class="string">&#x27;img&#x27;</span>, <span class="string">&#x27;gt_bboxes&#x27;</span>, <span class="string">&#x27;gt_labels&#x27;</span>]),</span><br><span class="line">]</span><br><span class="line">test_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadImageFromFile&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;MultiScaleFlipAug&#x27;</span>,</span><br><span class="line">        img_scale=(<span class="number">1000</span>, <span class="number">600</span>),</span><br><span class="line">        flip=<span class="literal">False</span>,</span><br><span class="line">        transforms=[</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>, keep_ratio=<span class="literal">True</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomFlip&#x27;</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Normalize&#x27;</span>, **img_norm_cfg),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Pad&#x27;</span>, size_divisor=<span class="number">32</span>),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;ImageToTensor&#x27;</span>, keys=[<span class="string">&#x27;img&#x27;</span>]),</span><br><span class="line">            <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Collect&#x27;</span>, keys=[<span class="string">&#x27;img&#x27;</span>]),</span><br><span class="line">        ])</span><br><span class="line">]</span><br><span class="line">data = <span class="built_in">dict</span>(</span><br><span class="line">    samples_per_gpu=<span class="number">2</span>,</span><br><span class="line">    workers_per_gpu=<span class="number">2</span>,</span><br><span class="line">    train=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;RepeatDataset&#x27;</span>,</span><br><span class="line">        times=<span class="number">3</span>,</span><br><span class="line">        dataset=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=dataset_type,</span><br><span class="line">            ann_file=[</span><br><span class="line">                data_root + <span class="string">&#x27;VOC2007/ImageSets/Main/trainval.txt&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            img_prefix=[data_root + <span class="string">&#x27;VOC2007/&#x27;</span>],</span><br><span class="line">            pipeline=train_pipeline)),</span><br><span class="line">    val=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br><span class="line">        ann_file=data_root + <span class="string">&#x27;VOC2007/ImageSets/Main/test.txt&#x27;</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">&#x27;VOC2007/&#x27;</span>,</span><br><span class="line">        pipeline=test_pipeline),</span><br><span class="line">    test=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br><span class="line">        ann_file=data_root + <span class="string">&#x27;VOC2007/ImageSets/Main/test.txt&#x27;</span>,</span><br><span class="line">        img_prefix=data_root + <span class="string">&#x27;VOC2007/&#x27;</span>,</span><br><span class="line">        pipeline=test_pipeline))</span><br><span class="line">evaluation = <span class="built_in">dict</span>(interval=<span class="number">1</span>, metric=<span class="string">&#x27;mAP&#x27;</span>)</span><br><span class="line"></span><br><span class="line">checkpoint_config = <span class="built_in">dict</span>(interval=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># yapf:disable</span></span><br><span class="line">log_config = <span class="built_in">dict</span>(</span><br><span class="line">    interval=<span class="number">50</span>,</span><br><span class="line">    hooks=[</span><br><span class="line">        <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;TextLoggerHook&#x27;</span>),</span><br><span class="line">        <span class="comment"># dict(type=&#x27;TensorboardLoggerHook&#x27;)</span></span><br><span class="line">    ])</span><br><span class="line"><span class="comment"># yapf:enable</span></span><br><span class="line">custom_hooks = [<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;NumClassCheckHook&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">##-------------------------------default_runtime-------------------------------##</span></span><br><span class="line">dist_params = <span class="built_in">dict</span>(backend=<span class="string">&#x27;nccl&#x27;</span>)</span><br><span class="line">log_level = <span class="string">&#x27;INFO&#x27;</span></span><br><span class="line">load_from = <span class="literal">None</span></span><br><span class="line">resume_from = <span class="literal">None</span></span><br><span class="line">workflow = [(<span class="string">&#x27;train&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">##------------------------------faster_rcnn_r50_fpn-----------------------------##</span></span><br><span class="line"><span class="comment"># model settings</span></span><br><span class="line">model = <span class="built_in">dict</span>(</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">&#x27;FasterRCNN&#x27;</span>,</span><br><span class="line">    pretrained=<span class="string">&#x27;torchvision://resnet50&#x27;</span>,</span><br><span class="line">    backbone=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;ResNet&#x27;</span>,</span><br><span class="line">        depth=<span class="number">50</span>,</span><br><span class="line">        num_stages=<span class="number">4</span>,</span><br><span class="line">        out_indices=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        frozen_stages=<span class="number">1</span>,</span><br><span class="line">        norm_cfg=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;BN&#x27;</span>, requires_grad=<span class="literal">True</span>),</span><br><span class="line">        norm_eval=<span class="literal">True</span>,</span><br><span class="line">        style=<span class="string">&#x27;pytorch&#x27;</span>),</span><br><span class="line">    neck=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;FPN&#x27;</span>,</span><br><span class="line">        in_channels=[<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>],</span><br><span class="line">        out_channels=<span class="number">256</span>,</span><br><span class="line">        num_outs=<span class="number">5</span>),</span><br><span class="line">    rpn_head=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;RPNHead&#x27;</span>,</span><br><span class="line">        in_channels=<span class="number">256</span>,</span><br><span class="line">        feat_channels=<span class="number">256</span>,</span><br><span class="line">        anchor_generator=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;AnchorGenerator&#x27;</span>,</span><br><span class="line">            scales=[<span class="number">8</span>],</span><br><span class="line">            ratios=[<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">2.0</span>],</span><br><span class="line">            strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>]),</span><br><span class="line">        bbox_coder=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;DeltaXYWHBBoxCoder&#x27;</span>,</span><br><span class="line">            target_means=[<span class="number">.0</span>, <span class="number">.0</span>, <span class="number">.0</span>, <span class="number">.0</span>],</span><br><span class="line">            target_stds=[<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>]),</span><br><span class="line">        loss_cls=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;CrossEntropyLoss&#x27;</span>, use_sigmoid=<span class="literal">True</span>, loss_weight=<span class="number">1.0</span>),</span><br><span class="line">        loss_bbox=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;L1Loss&#x27;</span>, loss_weight=<span class="number">1.0</span>)),</span><br><span class="line">    roi_head=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;StandardRoIHead&#x27;</span>,</span><br><span class="line">        bbox_roi_extractor=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;SingleRoIExtractor&#x27;</span>,</span><br><span class="line">            roi_layer=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RoIAlign&#x27;</span>, output_size=<span class="number">7</span>, sampling_ratio=<span class="number">0</span>),</span><br><span class="line">            out_channels=<span class="number">256</span>,</span><br><span class="line">            featmap_strides=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>]),</span><br><span class="line">        bbox_head=<span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&#x27;Shared2FCBBoxHead&#x27;</span>,</span><br><span class="line">            in_channels=<span class="number">256</span>,</span><br><span class="line">            fc_out_channels=<span class="number">1024</span>,</span><br><span class="line">            roi_feat_size=<span class="number">7</span>,</span><br><span class="line">            num_classes=<span class="number">2</span>,</span><br><span class="line">            bbox_coder=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;DeltaXYWHBBoxCoder&#x27;</span>,</span><br><span class="line">                target_means=[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">                target_stds=[<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.2</span>]),</span><br><span class="line">            reg_class_agnostic=<span class="literal">False</span>,</span><br><span class="line">            loss_cls=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;CrossEntropyLoss&#x27;</span>, use_sigmoid=<span class="literal">False</span>, loss_weight=<span class="number">1.0</span>),</span><br><span class="line">            loss_bbox=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;L1Loss&#x27;</span>, loss_weight=<span class="number">1.0</span>))),</span><br><span class="line">    <span class="comment"># model training and testing settings</span></span><br><span class="line">    train_cfg=<span class="built_in">dict</span>(</span><br><span class="line">        rpn=<span class="built_in">dict</span>(</span><br><span class="line">            assigner=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;MaxIoUAssigner&#x27;</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.7</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.3</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.3</span>,</span><br><span class="line">                match_low_quality=<span class="literal">True</span>,</span><br><span class="line">                ignore_iof_thr=-<span class="number">1</span>),</span><br><span class="line">            sampler=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;RandomSampler&#x27;</span>,</span><br><span class="line">                num=<span class="number">256</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.5</span>,</span><br><span class="line">                neg_pos_ub=-<span class="number">1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">False</span>),</span><br><span class="line">            allowed_border=-<span class="number">1</span>,</span><br><span class="line">            pos_weight=-<span class="number">1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>),</span><br><span class="line">        rpn_proposal=<span class="built_in">dict</span>(</span><br><span class="line">            nms_pre=<span class="number">2000</span>,</span><br><span class="line">            max_per_img=<span class="number">1000</span>,</span><br><span class="line">            nms=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;nms&#x27;</span>, iou_threshold=<span class="number">0.7</span>),</span><br><span class="line">            min_bbox_size=<span class="number">0</span>),</span><br><span class="line">        rcnn=<span class="built_in">dict</span>(</span><br><span class="line">            assigner=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;MaxIoUAssigner&#x27;</span>,</span><br><span class="line">                pos_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">                neg_iou_thr=<span class="number">0.5</span>,</span><br><span class="line">                min_pos_iou=<span class="number">0.5</span>,</span><br><span class="line">                match_low_quality=<span class="literal">False</span>,</span><br><span class="line">                ignore_iof_thr=-<span class="number">1</span>),</span><br><span class="line">            sampler=<span class="built_in">dict</span>(</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&#x27;RandomSampler&#x27;</span>,</span><br><span class="line">                num=<span class="number">512</span>,</span><br><span class="line">                pos_fraction=<span class="number">0.25</span>,</span><br><span class="line">                neg_pos_ub=-<span class="number">1</span>,</span><br><span class="line">                add_gt_as_proposals=<span class="literal">True</span>),</span><br><span class="line">            pos_weight=-<span class="number">1</span>,</span><br><span class="line">            debug=<span class="literal">False</span>)),</span><br><span class="line">    test_cfg=<span class="built_in">dict</span>(</span><br><span class="line">        rpn=<span class="built_in">dict</span>(</span><br><span class="line">            nms_pre=<span class="number">1000</span>,</span><br><span class="line">            max_per_img=<span class="number">1000</span>,</span><br><span class="line">            nms=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;nms&#x27;</span>, iou_threshold=<span class="number">0.7</span>),</span><br><span class="line">            min_bbox_size=<span class="number">0</span>),</span><br><span class="line">        rcnn=<span class="built_in">dict</span>(</span><br><span class="line">            score_thr=<span class="number">0.05</span>,</span><br><span class="line">            nms=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;nms&#x27;</span>, iou_threshold=<span class="number">0.5</span>),</span><br><span class="line">            max_per_img=<span class="number">100</span>)</span><br><span class="line">        <span class="comment"># soft-nms is also supported for rcnn testing</span></span><br><span class="line">        <span class="comment"># e.g., nms=dict(type=&#x27;soft_nms&#x27;, iou_threshold=0.5, min_score=0.05)</span></span><br><span class="line">    ))</span><br><span class="line">optimizer = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;SGD&#x27;</span>, lr=<span class="number">0.02</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">0.0001</span>)</span><br><span class="line">optimizer_config = <span class="built_in">dict</span>(grad_clip=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># learning policy</span></span><br><span class="line">lr_config = <span class="built_in">dict</span>(</span><br><span class="line">    policy=<span class="string">&#x27;step&#x27;</span>,</span><br><span class="line">    warmup=<span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">    warmup_iters=<span class="number">500</span>,</span><br><span class="line">    warmup_ratio=<span class="number">0.001</span>,</span><br><span class="line">    step=[<span class="number">8</span>, <span class="number">11</span>])</span><br><span class="line">runner = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;EpochBasedRunner&#x27;</span>, max_epochs=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="mmdetection训练损失为nan的问题"><a href="#mmdetection训练损失为nan的问题" class="headerlink" title="mmdetection训练损失为nan的问题"></a>mmdetection训练损失为nan的问题</h3><ol><li><p>调小学习率<br>一般出现loss nan，无非是网络传输的梯度过大导致的，所以首先考虑减小模型的学习率。可是学习率调小100倍甚至10000倍，还出现nan的情况，所以考虑其他原因导致。先排除学习率的影响，将学习率设为0，loss依旧nan，然后就可以尝试下一个了。</p></li><li><p>梯度裁剪<br>在学习率为0的情况下，进行梯度裁剪。在模型配置里schedule_1x.py，加上grad_clip</p></li></ol><p>optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))<br>依旧出现loss nan，这时有点蒙了。</p><ol start="3"><li>数据清洗<br>在github上看到有人分享经验，mmdetection v2版本，在gt的box和image的重叠区域为0时，会出现loss nan的情况，于是，我查了一边……庞！大！的！数据。发现，还真是数据出的问题。就是有11张图size很大的图在labelImg标注时，旋转了90度，也就是手机采集的竖长的图，到了LabelImg里变成横的了，标注的坐标信息也是这个横着的，而原图是竖着的，所以，标注的box在原图就有对不上的情况，处理掉这个，loss nan情况消失。</li></ol><p>训练模型的时候，会遇到各种各样的问题，可能要调很多参数，要根据现象进行分析，把可能的原因都排查一遍，最直接的做法就是排除法，把最好排查的因素排除了，就会逐渐清晰。<br><strong>本人调小学习率就可以解决问题</strong></p><p><strong>在数据清洗的时候发现本人数据集里出现其他文件，也是造成损失为nan的原因</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合练习</title>
      <link href="2021/03/23/SSM%E6%95%B4%E5%90%88%E7%BB%83%E4%B9%A0/"/>
      <url>2021/03/23/SSM%E6%95%B4%E5%90%88%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Prepare1：数据库创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create database ssm;</span><br><span class="line">Create table account(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">    name varchar(100),</span><br><span class="line">    money double(7,2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Prepare2:Maven工程创建</p><p>​    Q:需要添加什么依赖？</p><p>​    A：从dao层开始思考：</p><p>​        dao:mysql数据库驱动、JDBC连接池Druid、mybatis、mybatis-spring</p><p>​        service:spring-core、spring-aop、spring-aspect、servlet-api</p><p>​        web:spring-webmvc、jsp-api、jstl</p><p>​        test:Junit</p><p>​        日志:log4J</p><p>​        插件:tomcat、maven-compiler</p><p>Prepare3:编写实体类POJO</p><p>Prepare4:编写Mapper接口</p><p>​        mybatis相当于取消dao层使用daoMapper接口替换</p><p>Prepare5:编写Controller</p><p>Prepare6:jsp页面编写</p><p>重点学习：配置文件编写</p><ul><li><p>Spring配置文件ApplicationContext-service.xml</p></li><li><p>springmvc配置文件编写spring-mvl.xml</p></li><li><p>mybatis配置文件编写sqlMapConfig.xml、AccountMapper.xml</p></li><li><p>web.xml配置文件编写</p></li><li><p>jdbc配置文件编写jdbc.properties</p><p>A:从web.xml开始</p><ul><li><p>web.xml需要配置listener:ContextLoaderListener</p><p>servlet:DispatcherServlet、filter:CharacterEncodingFilter</p><p>context-param:spring配置文件资源位置</p></li></ul></li></ul><ul><li>ApplicationContext需要配置bean:{SqlSessionFactory}在基本的MyBatis种，session工厂可以使用SqlSessionFactoryBuilder来创建。而在Mybatis-Spring中，则使用SqlSessionFactoryBean来替代。其需要注入两个属性dataSource和mapper映射关系</li><li>spring-mvc需要配置:component-scan、annotaion-driven、internalResourceViewResolver、default-servlet-handler</li><li></li></ul><p>springmvc需要配置InternalResourceResolver</p><p>  spring需要配置注入(/编织)</p><p>  mybatis需要配置mapper</p><p>tips:</p><p>​    1.jdbc.properties编写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?serverTimezone&#x3D;GMT</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;997739480</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CspDarkNet53学习</title>
      <link href="2021/03/23/CspDarkNet53%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/03/23/CspDarkNet53%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="CSP结构"><a href="#CSP结构" class="headerlink" title="CSP结构"></a>CSP结构</h2><h3 id="Applying-CSPNet-to-ResNe-X-t"><a href="#Applying-CSPNet-to-ResNe-X-t" class="headerlink" title="Applying CSPNet to ResNe(X)t"></a>Applying CSPNet to ResNe(X)t</h3><p><img src="https://img-blog.csdnimg.cn/20201225145340414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTg0MTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>原文如此介绍：设计出Partial transition layers的目的是最大化梯度联合的差异。其使用梯度流截断的手段避免不同的层学习到重复的梯度信息。得出的结论是，如果能够有效的减少重复的梯度学习，那么网络的学习能力能够大大提升.</p><h3 id="Applying-CSPNet-to-DenseNet"><a href="#Applying-CSPNet-to-DenseNet" class="headerlink" title="Applying CSPNet to DenseNet"></a>Applying CSPNet to DenseNet</h3><p><img src="https://img-blog.csdnimg.cn/2020122514555768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTg0MTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="DarkNet53介绍"><a href="#DarkNet53介绍" class="headerlink" title="DarkNet53介绍"></a>DarkNet53介绍</h3><p><img src="https://img-blog.csdnimg.cn/20201225145707759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTg0MTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由上我们可以对比ResNet50得出其使用了<code>kernel_size=3，stride=1</code>的卷积代替了<code>kernel_size=7，stride=1</code>的卷积，减少了计算量。使用了<code>kernel_size=3,stride=1</code>的卷积代替了<code>maxpool</code>，因此作者认为Max-Pooling降采样会使得输出变得“高频高幅”，因此在后面会导致网格效应。此外DarkNet含有5个Residual相比于Resnet的4个stage,其中<code>Residual Block</code>中分支路使用的为<code>kernel_size=1,kernel_size=3,stride=1</code>的Conv，注意此处并没有进行降采样，而是在<code>concat</code>操作后<code>stride=2</code>的卷积进行下采样。</p><h3 id="CSPDarknet53架构"><a href="#CSPDarknet53架构" class="headerlink" title="CSPDarknet53架构"></a>CSPDarknet53架构</h3><p><img src="https://img-blog.csdnimg.cn/20201225151012679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ4OTg0MTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>采用博主@Bubbliiiing的YOLOV4实现讲解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import math</span><br><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">#-------------------------------------------------#</span><br><span class="line">#   MISH激活函数</span><br><span class="line">#-------------------------------------------------#</span><br><span class="line">class Mish(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Mish, self).__init__()</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        return x * torch.tanh(F.softplus(x))</span><br><span class="line"></span><br><span class="line">#-------------------------------------------------#</span><br><span class="line">#   卷积块</span><br><span class="line">#   CONV+BATCHNORM+MISH</span><br><span class="line">#-------------------------------------------------#</span><br><span class="line">class BasicConv(nn.Module):</span><br><span class="line">    def __init__(self, in_channels, out_channels, kernel_size, stride&#x3D;1):</span><br><span class="line">        super(BasicConv, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.conv &#x3D; nn.Conv2d(in_channels, out_channels, kernel_size, stride, kernel_size&#x2F;&#x2F;2, bias&#x3D;False)</span><br><span class="line">        self.bn &#x3D; nn.BatchNorm2d(out_channels)</span><br><span class="line">        self.activation &#x3D; Mish()</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.conv(x)</span><br><span class="line">        x &#x3D; self.bn(x)</span><br><span class="line">        x &#x3D; self.activation(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">#   CSPdarknet的结构块的组成部分</span><br><span class="line">#   内部堆叠的残差块</span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">class Resblock(nn.Module):</span><br><span class="line">    def __init__(self, channels, hidden_channels&#x3D;None, residual_activation&#x3D;nn.Identity()):</span><br><span class="line">        super(Resblock, self).__init__()</span><br><span class="line"></span><br><span class="line">        if hidden_channels is None:</span><br><span class="line">            hidden_channels &#x3D; channels</span><br><span class="line"></span><br><span class="line">        self.block &#x3D; nn.Sequential(</span><br><span class="line">            BasicConv(channels, hidden_channels, 1),</span><br><span class="line">            BasicConv(hidden_channels, channels, 3)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        return x+self.block(x)</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">#   CSPdarknet的结构块</span><br><span class="line">#   存在一个大残差边</span><br><span class="line">#   这个大残差边绕过了很多的残差结构</span><br><span class="line">#---------------------------------------------------#</span><br><span class="line">class Resblock_body(nn.Module):</span><br><span class="line">    def __init__(self, in_channels, out_channels, num_blocks, first):</span><br><span class="line">        super(Resblock_body, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.downsample_conv &#x3D; BasicConv(in_channels, out_channels, 3, stride&#x3D;2)</span><br><span class="line"></span><br><span class="line">        if first:</span><br><span class="line">            self.split_conv0 &#x3D; BasicConv(out_channels, out_channels, 1)</span><br><span class="line">            self.split_conv1 &#x3D; BasicConv(out_channels, out_channels, 1)  </span><br><span class="line">            self.blocks_conv &#x3D; nn.Sequential(</span><br><span class="line">                Resblock(channels&#x3D;out_channels, hidden_channels&#x3D;out_channels&#x2F;&#x2F;2),</span><br><span class="line">                BasicConv(out_channels, out_channels, 1)</span><br><span class="line">            )</span><br><span class="line">            self.concat_conv &#x3D; BasicConv(out_channels*2, out_channels, 1)</span><br><span class="line">        else:</span><br><span class="line">            self.split_conv0 &#x3D; BasicConv(out_channels, out_channels&#x2F;&#x2F;2, 1)</span><br><span class="line">            self.split_conv1 &#x3D; BasicConv(out_channels, out_channels&#x2F;&#x2F;2, 1)</span><br><span class="line"></span><br><span class="line">            self.blocks_conv &#x3D; nn.Sequential(</span><br><span class="line">                *[Resblock(out_channels&#x2F;&#x2F;2) for _ in range(num_blocks)],</span><br><span class="line">                BasicConv(out_channels&#x2F;&#x2F;2, out_channels&#x2F;&#x2F;2, 1)</span><br><span class="line">            )</span><br><span class="line">            self.concat_conv &#x3D; BasicConv(out_channels, out_channels, 1)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.downsample_conv(x)</span><br><span class="line"></span><br><span class="line">        x0 &#x3D; self.split_conv0(x)</span><br><span class="line"></span><br><span class="line">        x1 &#x3D; self.split_conv1(x)</span><br><span class="line">        x1 &#x3D; self.blocks_conv(x1)</span><br><span class="line"></span><br><span class="line">        x &#x3D; torch.cat([x1, x0], dim&#x3D;1)</span><br><span class="line">        x &#x3D; self.concat_conv(x)</span><br><span class="line"></span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">class CSPDarkNet(nn.Module):</span><br><span class="line">    def __init__(self, layers):</span><br><span class="line">        super(CSPDarkNet, self).__init__()</span><br><span class="line">        self.inplanes &#x3D; 32</span><br><span class="line">        self.conv1 &#x3D; BasicConv(3, self.inplanes, kernel_size&#x3D;3, stride&#x3D;1)</span><br><span class="line">        self.feature_channels &#x3D; [64, 128, 256, 512, 1024]</span><br><span class="line"></span><br><span class="line">        self.stages &#x3D; nn.ModuleList([</span><br><span class="line">            Resblock_body(self.inplanes, self.feature_channels[0], layers[0], first&#x3D;True),</span><br><span class="line">            Resblock_body(self.feature_channels[0], self.feature_channels[1], layers[1], first&#x3D;False),</span><br><span class="line">            Resblock_body(self.feature_channels[1], self.feature_channels[2], layers[2], first&#x3D;False),</span><br><span class="line">            Resblock_body(self.feature_channels[2], self.feature_channels[3], layers[3], first&#x3D;False),</span><br><span class="line">            Resblock_body(self.feature_channels[3], self.feature_channels[4], layers[4], first&#x3D;False)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        self.num_features &#x3D; 1</span><br><span class="line">        # 进行权值初始化</span><br><span class="line">        for m in self.modules():</span><br><span class="line">            if isinstance(m, nn.Conv2d):</span><br><span class="line">                n &#x3D; m.kernel_size[0] * m.kernel_size[1] * m.out_channels</span><br><span class="line">                m.weight.data.normal_(0, math.sqrt(2. &#x2F; n))</span><br><span class="line">            elif isinstance(m, nn.BatchNorm2d):</span><br><span class="line">                m.weight.data.fill_(1)</span><br><span class="line">                m.bias.data.zero_()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.conv1(x)</span><br><span class="line"></span><br><span class="line">        x &#x3D; self.stages[0](x)</span><br><span class="line">        x &#x3D; self.stages[1](x)</span><br><span class="line">        out3 &#x3D; self.stages[2](x)</span><br><span class="line">        out4 &#x3D; self.stages[3](out3)</span><br><span class="line">        out5 &#x3D; self.stages[4](out4)</span><br><span class="line"></span><br><span class="line">        return out3, out4, out5</span><br><span class="line"></span><br><span class="line">def darknet53(pretrained, **kwargs):</span><br><span class="line">    model &#x3D; CSPDarkNet([1, 2, 8, 8, 4])</span><br><span class="line">    if pretrained:</span><br><span class="line">        if isinstance(pretrained, str):</span><br><span class="line">            model.load_state_dict(torch.load(pretrained))</span><br><span class="line">        else:</span><br><span class="line">            raise Exception(&quot;darknet request a pretrained path. got [&#123;&#125;]&quot;.format(pretrained))</span><br><span class="line">    return model</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好，讲完了。嘻嘻<br><br><br><strong>首先3x3,stride=1的卷积通道压缩，进入Resblock1。<br>ResBlock1先降采样(减小后续计算量)，走paritial transition路线,分支为两个1x1，stride=1的卷积。其中一个分支走residual block路线。<br>结束后进行x0,x1拼接，拼接后在进行一次卷积</strong><br>由于先进行降采样，因此计算量，计算速度大大减小。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1].<a href="https://zhuanlan.zhihu.com/p/56269115">关于ResNet及其变体的总结（下）</a><br>[2].<a href="https://blog.csdn.net/weixin_44791964/article/details/106214657">睿智的目标检测30——Pytorch搭建YoloV4目标检测平台</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> backBone </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
